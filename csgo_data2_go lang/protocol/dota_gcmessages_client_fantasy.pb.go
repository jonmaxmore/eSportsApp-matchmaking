// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dota_gcmessages_client_fantasy.proto

package protocol

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DOTA_2013PassportSelectionIndices int32

const (
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_0    DOTA_2013PassportSelectionIndices = 0
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_1    DOTA_2013PassportSelectionIndices = 1
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_2    DOTA_2013PassportSelectionIndices = 2
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_3    DOTA_2013PassportSelectionIndices = 3
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_4    DOTA_2013PassportSelectionIndices = 4
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_5    DOTA_2013PassportSelectionIndices = 5
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_6    DOTA_2013PassportSelectionIndices = 6
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_7    DOTA_2013PassportSelectionIndices = 7
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_8    DOTA_2013PassportSelectionIndices = 8
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_9    DOTA_2013PassportSelectionIndices = 9
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_0     DOTA_2013PassportSelectionIndices = 10
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_1     DOTA_2013PassportSelectionIndices = 11
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_2     DOTA_2013PassportSelectionIndices = 12
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_3     DOTA_2013PassportSelectionIndices = 13
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_4     DOTA_2013PassportSelectionIndices = 14
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_5     DOTA_2013PassportSelectionIndices = 15
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_6     DOTA_2013PassportSelectionIndices = 16
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_7     DOTA_2013PassportSelectionIndices = 17
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_8     DOTA_2013PassportSelectionIndices = 18
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_9     DOTA_2013PassportSelectionIndices = 19
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_10    DOTA_2013PassportSelectionIndices = 20
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_11    DOTA_2013PassportSelectionIndices = 21
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_12    DOTA_2013PassportSelectionIndices = 22
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_13    DOTA_2013PassportSelectionIndices = 23
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_14    DOTA_2013PassportSelectionIndices = 24
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_0     DOTA_2013PassportSelectionIndices = 25
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_1     DOTA_2013PassportSelectionIndices = 26
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_2     DOTA_2013PassportSelectionIndices = 27
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_3     DOTA_2013PassportSelectionIndices = 28
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_4     DOTA_2013PassportSelectionIndices = 29
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_5     DOTA_2013PassportSelectionIndices = 30
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_6     DOTA_2013PassportSelectionIndices = 31
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_7     DOTA_2013PassportSelectionIndices = 32
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_8     DOTA_2013PassportSelectionIndices = 33
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_9     DOTA_2013PassportSelectionIndices = 34
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_10    DOTA_2013PassportSelectionIndices = 35
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_11    DOTA_2013PassportSelectionIndices = 36
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_12    DOTA_2013PassportSelectionIndices = 37
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_13    DOTA_2013PassportSelectionIndices = 38
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_14    DOTA_2013PassportSelectionIndices = 39
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_TEAM        DOTA_2013PassportSelectionIndices = 40
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_PLAYER      DOTA_2013PassportSelectionIndices = 41
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_TEAM_LOCK   DOTA_2013PassportSelectionIndices = 42
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_PLAYER_LOCK DOTA_2013PassportSelectionIndices = 43
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_0         DOTA_2013PassportSelectionIndices = 44
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_1         DOTA_2013PassportSelectionIndices = 45
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_2         DOTA_2013PassportSelectionIndices = 46
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_3         DOTA_2013PassportSelectionIndices = 47
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_4         DOTA_2013PassportSelectionIndices = 48
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_5         DOTA_2013PassportSelectionIndices = 49
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_6         DOTA_2013PassportSelectionIndices = 50
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_7         DOTA_2013PassportSelectionIndices = 51
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_8         DOTA_2013PassportSelectionIndices = 52
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_9         DOTA_2013PassportSelectionIndices = 53
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_10        DOTA_2013PassportSelectionIndices = 54
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_11        DOTA_2013PassportSelectionIndices = 55
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_12        DOTA_2013PassportSelectionIndices = 56
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_13        DOTA_2013PassportSelectionIndices = 57
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_14        DOTA_2013PassportSelectionIndices = 58
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_15        DOTA_2013PassportSelectionIndices = 59
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_16        DOTA_2013PassportSelectionIndices = 60
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_17        DOTA_2013PassportSelectionIndices = 61
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_18        DOTA_2013PassportSelectionIndices = 62
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_19        DOTA_2013PassportSelectionIndices = 63
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_20        DOTA_2013PassportSelectionIndices = 64
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_21        DOTA_2013PassportSelectionIndices = 65
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_22        DOTA_2013PassportSelectionIndices = 66
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_23        DOTA_2013PassportSelectionIndices = 67
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_24        DOTA_2013PassportSelectionIndices = 68
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_25        DOTA_2013PassportSelectionIndices = 69
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_26        DOTA_2013PassportSelectionIndices = 70
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_27        DOTA_2013PassportSelectionIndices = 71
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_28        DOTA_2013PassportSelectionIndices = 72
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_29        DOTA_2013PassportSelectionIndices = 73
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_30        DOTA_2013PassportSelectionIndices = 74
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_31        DOTA_2013PassportSelectionIndices = 75
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_32        DOTA_2013PassportSelectionIndices = 76
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_33        DOTA_2013PassportSelectionIndices = 77
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_34        DOTA_2013PassportSelectionIndices = 78
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_35        DOTA_2013PassportSelectionIndices = 79
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_36        DOTA_2013PassportSelectionIndices = 80
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_37        DOTA_2013PassportSelectionIndices = 81
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_38        DOTA_2013PassportSelectionIndices = 82
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_39        DOTA_2013PassportSelectionIndices = 83
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_40        DOTA_2013PassportSelectionIndices = 84
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_41        DOTA_2013PassportSelectionIndices = 85
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_42        DOTA_2013PassportSelectionIndices = 86
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_43        DOTA_2013PassportSelectionIndices = 87
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_0              DOTA_2013PassportSelectionIndices = 88
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_1              DOTA_2013PassportSelectionIndices = 89
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_2              DOTA_2013PassportSelectionIndices = 90
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_3              DOTA_2013PassportSelectionIndices = 91
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_4              DOTA_2013PassportSelectionIndices = 92
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_5              DOTA_2013PassportSelectionIndices = 93
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_6              DOTA_2013PassportSelectionIndices = 94
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_7              DOTA_2013PassportSelectionIndices = 95
)

var DOTA_2013PassportSelectionIndices_name = map[int32]string{
	0:  "PP13_SEL_ALLSTAR_PLAYER_0",
	1:  "PP13_SEL_ALLSTAR_PLAYER_1",
	2:  "PP13_SEL_ALLSTAR_PLAYER_2",
	3:  "PP13_SEL_ALLSTAR_PLAYER_3",
	4:  "PP13_SEL_ALLSTAR_PLAYER_4",
	5:  "PP13_SEL_ALLSTAR_PLAYER_5",
	6:  "PP13_SEL_ALLSTAR_PLAYER_6",
	7:  "PP13_SEL_ALLSTAR_PLAYER_7",
	8:  "PP13_SEL_ALLSTAR_PLAYER_8",
	9:  "PP13_SEL_ALLSTAR_PLAYER_9",
	10: "PP13_SEL_QUALPRED_WEST_0",
	11: "PP13_SEL_QUALPRED_WEST_1",
	12: "PP13_SEL_QUALPRED_WEST_2",
	13: "PP13_SEL_QUALPRED_WEST_3",
	14: "PP13_SEL_QUALPRED_WEST_4",
	15: "PP13_SEL_QUALPRED_WEST_5",
	16: "PP13_SEL_QUALPRED_WEST_6",
	17: "PP13_SEL_QUALPRED_WEST_7",
	18: "PP13_SEL_QUALPRED_WEST_8",
	19: "PP13_SEL_QUALPRED_WEST_9",
	20: "PP13_SEL_QUALPRED_WEST_10",
	21: "PP13_SEL_QUALPRED_WEST_11",
	22: "PP13_SEL_QUALPRED_WEST_12",
	23: "PP13_SEL_QUALPRED_WEST_13",
	24: "PP13_SEL_QUALPRED_WEST_14",
	25: "PP13_SEL_QUALPRED_EAST_0",
	26: "PP13_SEL_QUALPRED_EAST_1",
	27: "PP13_SEL_QUALPRED_EAST_2",
	28: "PP13_SEL_QUALPRED_EAST_3",
	29: "PP13_SEL_QUALPRED_EAST_4",
	30: "PP13_SEL_QUALPRED_EAST_5",
	31: "PP13_SEL_QUALPRED_EAST_6",
	32: "PP13_SEL_QUALPRED_EAST_7",
	33: "PP13_SEL_QUALPRED_EAST_8",
	34: "PP13_SEL_QUALPRED_EAST_9",
	35: "PP13_SEL_QUALPRED_EAST_10",
	36: "PP13_SEL_QUALPRED_EAST_11",
	37: "PP13_SEL_QUALPRED_EAST_12",
	38: "PP13_SEL_QUALPRED_EAST_13",
	39: "PP13_SEL_QUALPRED_EAST_14",
	40: "PP13_SEL_TEAMCUP_TEAM",
	41: "PP13_SEL_TEAMCUP_PLAYER",
	42: "PP13_SEL_TEAMCUP_TEAM_LOCK",
	43: "PP13_SEL_TEAMCUP_PLAYER_LOCK",
	44: "PP13_SEL_EVENTPRED_0",
	45: "PP13_SEL_EVENTPRED_1",
	46: "PP13_SEL_EVENTPRED_2",
	47: "PP13_SEL_EVENTPRED_3",
	48: "PP13_SEL_EVENTPRED_4",
	49: "PP13_SEL_EVENTPRED_5",
	50: "PP13_SEL_EVENTPRED_6",
	51: "PP13_SEL_EVENTPRED_7",
	52: "PP13_SEL_EVENTPRED_8",
	53: "PP13_SEL_EVENTPRED_9",
	54: "PP13_SEL_EVENTPRED_10",
	55: "PP13_SEL_EVENTPRED_11",
	56: "PP13_SEL_EVENTPRED_12",
	57: "PP13_SEL_EVENTPRED_13",
	58: "PP13_SEL_EVENTPRED_14",
	59: "PP13_SEL_EVENTPRED_15",
	60: "PP13_SEL_EVENTPRED_16",
	61: "PP13_SEL_EVENTPRED_17",
	62: "PP13_SEL_EVENTPRED_18",
	63: "PP13_SEL_EVENTPRED_19",
	64: "PP13_SEL_EVENTPRED_20",
	65: "PP13_SEL_EVENTPRED_21",
	66: "PP13_SEL_EVENTPRED_22",
	67: "PP13_SEL_EVENTPRED_23",
	68: "PP13_SEL_EVENTPRED_24",
	69: "PP13_SEL_EVENTPRED_25",
	70: "PP13_SEL_EVENTPRED_26",
	71: "PP13_SEL_EVENTPRED_27",
	72: "PP13_SEL_EVENTPRED_28",
	73: "PP13_SEL_EVENTPRED_29",
	74: "PP13_SEL_EVENTPRED_30",
	75: "PP13_SEL_EVENTPRED_31",
	76: "PP13_SEL_EVENTPRED_32",
	77: "PP13_SEL_EVENTPRED_33",
	78: "PP13_SEL_EVENTPRED_34",
	79: "PP13_SEL_EVENTPRED_35",
	80: "PP13_SEL_EVENTPRED_36",
	81: "PP13_SEL_EVENTPRED_37",
	82: "PP13_SEL_EVENTPRED_38",
	83: "PP13_SEL_EVENTPRED_39",
	84: "PP13_SEL_EVENTPRED_40",
	85: "PP13_SEL_EVENTPRED_41",
	86: "PP13_SEL_EVENTPRED_42",
	87: "PP13_SEL_EVENTPRED_43",
	88: "PP13_SEL_SOLO_0",
	89: "PP13_SEL_SOLO_1",
	90: "PP13_SEL_SOLO_2",
	91: "PP13_SEL_SOLO_3",
	92: "PP13_SEL_SOLO_4",
	93: "PP13_SEL_SOLO_5",
	94: "PP13_SEL_SOLO_6",
	95: "PP13_SEL_SOLO_7",
}

var DOTA_2013PassportSelectionIndices_value = map[string]int32{
	"PP13_SEL_ALLSTAR_PLAYER_0":    0,
	"PP13_SEL_ALLSTAR_PLAYER_1":    1,
	"PP13_SEL_ALLSTAR_PLAYER_2":    2,
	"PP13_SEL_ALLSTAR_PLAYER_3":    3,
	"PP13_SEL_ALLSTAR_PLAYER_4":    4,
	"PP13_SEL_ALLSTAR_PLAYER_5":    5,
	"PP13_SEL_ALLSTAR_PLAYER_6":    6,
	"PP13_SEL_ALLSTAR_PLAYER_7":    7,
	"PP13_SEL_ALLSTAR_PLAYER_8":    8,
	"PP13_SEL_ALLSTAR_PLAYER_9":    9,
	"PP13_SEL_QUALPRED_WEST_0":     10,
	"PP13_SEL_QUALPRED_WEST_1":     11,
	"PP13_SEL_QUALPRED_WEST_2":     12,
	"PP13_SEL_QUALPRED_WEST_3":     13,
	"PP13_SEL_QUALPRED_WEST_4":     14,
	"PP13_SEL_QUALPRED_WEST_5":     15,
	"PP13_SEL_QUALPRED_WEST_6":     16,
	"PP13_SEL_QUALPRED_WEST_7":     17,
	"PP13_SEL_QUALPRED_WEST_8":     18,
	"PP13_SEL_QUALPRED_WEST_9":     19,
	"PP13_SEL_QUALPRED_WEST_10":    20,
	"PP13_SEL_QUALPRED_WEST_11":    21,
	"PP13_SEL_QUALPRED_WEST_12":    22,
	"PP13_SEL_QUALPRED_WEST_13":    23,
	"PP13_SEL_QUALPRED_WEST_14":    24,
	"PP13_SEL_QUALPRED_EAST_0":     25,
	"PP13_SEL_QUALPRED_EAST_1":     26,
	"PP13_SEL_QUALPRED_EAST_2":     27,
	"PP13_SEL_QUALPRED_EAST_3":     28,
	"PP13_SEL_QUALPRED_EAST_4":     29,
	"PP13_SEL_QUALPRED_EAST_5":     30,
	"PP13_SEL_QUALPRED_EAST_6":     31,
	"PP13_SEL_QUALPRED_EAST_7":     32,
	"PP13_SEL_QUALPRED_EAST_8":     33,
	"PP13_SEL_QUALPRED_EAST_9":     34,
	"PP13_SEL_QUALPRED_EAST_10":    35,
	"PP13_SEL_QUALPRED_EAST_11":    36,
	"PP13_SEL_QUALPRED_EAST_12":    37,
	"PP13_SEL_QUALPRED_EAST_13":    38,
	"PP13_SEL_QUALPRED_EAST_14":    39,
	"PP13_SEL_TEAMCUP_TEAM":        40,
	"PP13_SEL_TEAMCUP_PLAYER":      41,
	"PP13_SEL_TEAMCUP_TEAM_LOCK":   42,
	"PP13_SEL_TEAMCUP_PLAYER_LOCK": 43,
	"PP13_SEL_EVENTPRED_0":         44,
	"PP13_SEL_EVENTPRED_1":         45,
	"PP13_SEL_EVENTPRED_2":         46,
	"PP13_SEL_EVENTPRED_3":         47,
	"PP13_SEL_EVENTPRED_4":         48,
	"PP13_SEL_EVENTPRED_5":         49,
	"PP13_SEL_EVENTPRED_6":         50,
	"PP13_SEL_EVENTPRED_7":         51,
	"PP13_SEL_EVENTPRED_8":         52,
	"PP13_SEL_EVENTPRED_9":         53,
	"PP13_SEL_EVENTPRED_10":        54,
	"PP13_SEL_EVENTPRED_11":        55,
	"PP13_SEL_EVENTPRED_12":        56,
	"PP13_SEL_EVENTPRED_13":        57,
	"PP13_SEL_EVENTPRED_14":        58,
	"PP13_SEL_EVENTPRED_15":        59,
	"PP13_SEL_EVENTPRED_16":        60,
	"PP13_SEL_EVENTPRED_17":        61,
	"PP13_SEL_EVENTPRED_18":        62,
	"PP13_SEL_EVENTPRED_19":        63,
	"PP13_SEL_EVENTPRED_20":        64,
	"PP13_SEL_EVENTPRED_21":        65,
	"PP13_SEL_EVENTPRED_22":        66,
	"PP13_SEL_EVENTPRED_23":        67,
	"PP13_SEL_EVENTPRED_24":        68,
	"PP13_SEL_EVENTPRED_25":        69,
	"PP13_SEL_EVENTPRED_26":        70,
	"PP13_SEL_EVENTPRED_27":        71,
	"PP13_SEL_EVENTPRED_28":        72,
	"PP13_SEL_EVENTPRED_29":        73,
	"PP13_SEL_EVENTPRED_30":        74,
	"PP13_SEL_EVENTPRED_31":        75,
	"PP13_SEL_EVENTPRED_32":        76,
	"PP13_SEL_EVENTPRED_33":        77,
	"PP13_SEL_EVENTPRED_34":        78,
	"PP13_SEL_EVENTPRED_35":        79,
	"PP13_SEL_EVENTPRED_36":        80,
	"PP13_SEL_EVENTPRED_37":        81,
	"PP13_SEL_EVENTPRED_38":        82,
	"PP13_SEL_EVENTPRED_39":        83,
	"PP13_SEL_EVENTPRED_40":        84,
	"PP13_SEL_EVENTPRED_41":        85,
	"PP13_SEL_EVENTPRED_42":        86,
	"PP13_SEL_EVENTPRED_43":        87,
	"PP13_SEL_SOLO_0":              88,
	"PP13_SEL_SOLO_1":              89,
	"PP13_SEL_SOLO_2":              90,
	"PP13_SEL_SOLO_3":              91,
	"PP13_SEL_SOLO_4":              92,
	"PP13_SEL_SOLO_5":              93,
	"PP13_SEL_SOLO_6":              94,
	"PP13_SEL_SOLO_7":              95,
}

func (x DOTA_2013PassportSelectionIndices) Enum() *DOTA_2013PassportSelectionIndices {
	p := new(DOTA_2013PassportSelectionIndices)
	*p = x
	return p
}

func (x DOTA_2013PassportSelectionIndices) String() string {
	return proto.EnumName(DOTA_2013PassportSelectionIndices_name, int32(x))
}

func (x *DOTA_2013PassportSelectionIndices) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_2013PassportSelectionIndices_value, data, "DOTA_2013PassportSelectionIndices")
	if err != nil {
		return err
	}
	*x = DOTA_2013PassportSelectionIndices(value)
	return nil
}

func (DOTA_2013PassportSelectionIndices) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{0}
}

type CMsgClientToGCGetPlayerCardRosterResponse_Result int32

const (
	CMsgClientToGCGetPlayerCardRosterResponse_SUCCESS                 CMsgClientToGCGetPlayerCardRosterResponse_Result = 0
	CMsgClientToGCGetPlayerCardRosterResponse_ERROR_UNSPECIFIED       CMsgClientToGCGetPlayerCardRosterResponse_Result = 1
	CMsgClientToGCGetPlayerCardRosterResponse_ERROR_INVALID_LEAGUE_ID CMsgClientToGCGetPlayerCardRosterResponse_Result = 2
	CMsgClientToGCGetPlayerCardRosterResponse_ERROR_INVALID_TIMESTAMP CMsgClientToGCGetPlayerCardRosterResponse_Result = 3
)

var CMsgClientToGCGetPlayerCardRosterResponse_Result_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_INVALID_LEAGUE_ID",
	3: "ERROR_INVALID_TIMESTAMP",
}

var CMsgClientToGCGetPlayerCardRosterResponse_Result_value = map[string]int32{
	"SUCCESS":                 0,
	"ERROR_UNSPECIFIED":       1,
	"ERROR_INVALID_LEAGUE_ID": 2,
	"ERROR_INVALID_TIMESTAMP": 3,
}

func (x CMsgClientToGCGetPlayerCardRosterResponse_Result) Enum() *CMsgClientToGCGetPlayerCardRosterResponse_Result {
	p := new(CMsgClientToGCGetPlayerCardRosterResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCGetPlayerCardRosterResponse_Result) String() string {
	return proto.EnumName(CMsgClientToGCGetPlayerCardRosterResponse_Result_name, int32(x))
}

func (x *CMsgClientToGCGetPlayerCardRosterResponse_Result) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgClientToGCGetPlayerCardRosterResponse_Result_value, data, "CMsgClientToGCGetPlayerCardRosterResponse_Result")
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetPlayerCardRosterResponse_Result(value)
	return nil
}

func (CMsgClientToGCGetPlayerCardRosterResponse_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{11, 0}
}

type CMsgClientToGCBatchGetPlayerCardRosterResponse_Result int32

const (
	CMsgClientToGCBatchGetPlayerCardRosterResponse_SUCCESS                 CMsgClientToGCBatchGetPlayerCardRosterResponse_Result = 0
	CMsgClientToGCBatchGetPlayerCardRosterResponse_ERROR_UNSPECIFIED       CMsgClientToGCBatchGetPlayerCardRosterResponse_Result = 1
	CMsgClientToGCBatchGetPlayerCardRosterResponse_ERROR_INVALID_LEAGUE_ID CMsgClientToGCBatchGetPlayerCardRosterResponse_Result = 2
	CMsgClientToGCBatchGetPlayerCardRosterResponse_ERROR_INVALID_TIMESTAMP CMsgClientToGCBatchGetPlayerCardRosterResponse_Result = 3
)

var CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_INVALID_LEAGUE_ID",
	3: "ERROR_INVALID_TIMESTAMP",
}

var CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_value = map[string]int32{
	"SUCCESS":                 0,
	"ERROR_UNSPECIFIED":       1,
	"ERROR_INVALID_LEAGUE_ID": 2,
	"ERROR_INVALID_TIMESTAMP": 3,
}

func (x CMsgClientToGCBatchGetPlayerCardRosterResponse_Result) Enum() *CMsgClientToGCBatchGetPlayerCardRosterResponse_Result {
	p := new(CMsgClientToGCBatchGetPlayerCardRosterResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCBatchGetPlayerCardRosterResponse_Result) String() string {
	return proto.EnumName(CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_name, int32(x))
}

func (x *CMsgClientToGCBatchGetPlayerCardRosterResponse_Result) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_value, data, "CMsgClientToGCBatchGetPlayerCardRosterResponse_Result")
	if err != nil {
		return err
	}
	*x = CMsgClientToGCBatchGetPlayerCardRosterResponse_Result(value)
	return nil
}

func (CMsgClientToGCBatchGetPlayerCardRosterResponse_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{13, 0}
}

type CMsgClientToGCSetPlayerCardRosterResponse_Result int32

const (
	CMsgClientToGCSetPlayerCardRosterResponse_SUCCESS                         CMsgClientToGCSetPlayerCardRosterResponse_Result = 0
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_UNSPECIFIED               CMsgClientToGCSetPlayerCardRosterResponse_Result = 1
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_INVALID_LEAGUE_ID         CMsgClientToGCSetPlayerCardRosterResponse_Result = 2
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_INVALID_TIMESTAMP         CMsgClientToGCSetPlayerCardRosterResponse_Result = 3
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_PLAYER_CARD_NOT_OWNED     CMsgClientToGCSetPlayerCardRosterResponse_Result = 4
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_INVALID_SLOT              CMsgClientToGCSetPlayerCardRosterResponse_Result = 5
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_FAILED_CARD_INFO          CMsgClientToGCSetPlayerCardRosterResponse_Result = 6
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_ACCOUNT_DUPLICATE         CMsgClientToGCSetPlayerCardRosterResponse_Result = 7
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_LOCKED_TIMESTAMP          CMsgClientToGCSetPlayerCardRosterResponse_Result = 8
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_INVALID_LEAGUE_FOR_PERIOD CMsgClientToGCSetPlayerCardRosterResponse_Result = 9
	CMsgClientToGCSetPlayerCardRosterResponse_ERROR_INVALID_EVENT             CMsgClientToGCSetPlayerCardRosterResponse_Result = 10
)

var CMsgClientToGCSetPlayerCardRosterResponse_Result_name = map[int32]string{
	0:  "SUCCESS",
	1:  "ERROR_UNSPECIFIED",
	2:  "ERROR_INVALID_LEAGUE_ID",
	3:  "ERROR_INVALID_TIMESTAMP",
	4:  "ERROR_PLAYER_CARD_NOT_OWNED",
	5:  "ERROR_INVALID_SLOT",
	6:  "ERROR_FAILED_CARD_INFO",
	7:  "ERROR_ACCOUNT_DUPLICATE",
	8:  "ERROR_LOCKED_TIMESTAMP",
	9:  "ERROR_INVALID_LEAGUE_FOR_PERIOD",
	10: "ERROR_INVALID_EVENT",
}

var CMsgClientToGCSetPlayerCardRosterResponse_Result_value = map[string]int32{
	"SUCCESS":                         0,
	"ERROR_UNSPECIFIED":               1,
	"ERROR_INVALID_LEAGUE_ID":         2,
	"ERROR_INVALID_TIMESTAMP":         3,
	"ERROR_PLAYER_CARD_NOT_OWNED":     4,
	"ERROR_INVALID_SLOT":              5,
	"ERROR_FAILED_CARD_INFO":          6,
	"ERROR_ACCOUNT_DUPLICATE":         7,
	"ERROR_LOCKED_TIMESTAMP":          8,
	"ERROR_INVALID_LEAGUE_FOR_PERIOD": 9,
	"ERROR_INVALID_EVENT":             10,
}

func (x CMsgClientToGCSetPlayerCardRosterResponse_Result) Enum() *CMsgClientToGCSetPlayerCardRosterResponse_Result {
	p := new(CMsgClientToGCSetPlayerCardRosterResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCSetPlayerCardRosterResponse_Result) String() string {
	return proto.EnumName(CMsgClientToGCSetPlayerCardRosterResponse_Result_name, int32(x))
}

func (x *CMsgClientToGCSetPlayerCardRosterResponse_Result) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgClientToGCSetPlayerCardRosterResponse_Result_value, data, "CMsgClientToGCSetPlayerCardRosterResponse_Result")
	if err != nil {
		return err
	}
	*x = CMsgClientToGCSetPlayerCardRosterResponse_Result(value)
	return nil
}

func (CMsgClientToGCSetPlayerCardRosterResponse_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{15, 0}
}

type CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus int32

const (
	CMsgDOTAFantasyDPCLeagueStatus_UNSET     CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus = 0
	CMsgDOTAFantasyDPCLeagueStatus_PARTIAL   CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus = 1
	CMsgDOTAFantasyDPCLeagueStatus_FULL      CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus = 2
	CMsgDOTAFantasyDPCLeagueStatus_CONCLUDED CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus = 3
)

var CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_name = map[int32]string{
	0: "UNSET",
	1: "PARTIAL",
	2: "FULL",
	3: "CONCLUDED",
}

var CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_value = map[string]int32{
	"UNSET":     0,
	"PARTIAL":   1,
	"FULL":      2,
	"CONCLUDED": 3,
}

func (x CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus) Enum() *CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus {
	p := new(CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus)
	*p = x
	return p
}

func (x CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus) String() string {
	return proto.EnumName(CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_name, int32(x))
}

func (x *CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_value, data, "CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus(value)
	return nil
}

func (CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{16, 0}
}

type CMsgDOTADPCSearchResults_ESearchResultsDesired int32

const (
	CMsgDOTADPCSearchResults_k_ESearchResultsDesired_Players CMsgDOTADPCSearchResults_ESearchResultsDesired = 1
	CMsgDOTADPCSearchResults_k_ESearchResultsDesired_Teams   CMsgDOTADPCSearchResults_ESearchResultsDesired = 2
	CMsgDOTADPCSearchResults_k_ESearchResultsDesired_Leagues CMsgDOTADPCSearchResults_ESearchResultsDesired = 4
	CMsgDOTADPCSearchResults_k_ESearchResultsDesired_All     CMsgDOTADPCSearchResults_ESearchResultsDesired = 7
)

var CMsgDOTADPCSearchResults_ESearchResultsDesired_name = map[int32]string{
	1: "k_ESearchResultsDesired_Players",
	2: "k_ESearchResultsDesired_Teams",
	4: "k_ESearchResultsDesired_Leagues",
	7: "k_ESearchResultsDesired_All",
}

var CMsgDOTADPCSearchResults_ESearchResultsDesired_value = map[string]int32{
	"k_ESearchResultsDesired_Players": 1,
	"k_ESearchResultsDesired_Teams":   2,
	"k_ESearchResultsDesired_Leagues": 4,
	"k_ESearchResultsDesired_All":     7,
}

func (x CMsgDOTADPCSearchResults_ESearchResultsDesired) Enum() *CMsgDOTADPCSearchResults_ESearchResultsDesired {
	p := new(CMsgDOTADPCSearchResults_ESearchResultsDesired)
	*p = x
	return p
}

func (x CMsgDOTADPCSearchResults_ESearchResultsDesired) String() string {
	return proto.EnumName(CMsgDOTADPCSearchResults_ESearchResultsDesired_name, int32(x))
}

func (x *CMsgDOTADPCSearchResults_ESearchResultsDesired) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTADPCSearchResults_ESearchResultsDesired_value, data, "CMsgDOTADPCSearchResults_ESearchResultsDesired")
	if err != nil {
		return err
	}
	*x = CMsgDOTADPCSearchResults_ESearchResultsDesired(value)
	return nil
}

func (CMsgDOTADPCSearchResults_ESearchResultsDesired) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{17, 0}
}

type CMsgDOTAPlayerInfo struct {
	AccountId            *uint32                          `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Name                 *string                          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	CountryCode          *string                          `protobuf:"bytes,3,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	FantasyRole          *Fantasy_Roles                   `protobuf:"varint,4,opt,name=fantasy_role,json=fantasyRole,enum=protocol.Fantasy_Roles,def=0" json:"fantasy_role,omitempty"`
	TeamId               *uint32                          `protobuf:"varint,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName             *string                          `protobuf:"bytes,6,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamTag              *string                          `protobuf:"bytes,7,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	Sponsor              *string                          `protobuf:"bytes,8,opt,name=sponsor" json:"sponsor,omitempty"`
	IsLocked             *bool                            `protobuf:"varint,9,opt,name=is_locked,json=isLocked" json:"is_locked,omitempty"`
	IsPro                *bool                            `protobuf:"varint,10,opt,name=is_pro,json=isPro" json:"is_pro,omitempty"`
	RealName             *string                          `protobuf:"bytes,11,opt,name=real_name,json=realName" json:"real_name,omitempty"`
	TotalEarnings        *uint32                          `protobuf:"varint,13,opt,name=total_earnings,json=totalEarnings" json:"total_earnings,omitempty"`
	Results              []*CMsgDOTAPlayerInfo_Results    `protobuf:"bytes,14,rep,name=results" json:"results,omitempty"`
	TeamUrlLogo          *string                          `protobuf:"bytes,15,opt,name=team_url_logo,json=teamUrlLogo" json:"team_url_logo,omitempty"`
	AuditEntries         []*CMsgDOTAPlayerInfo_AuditEntry `protobuf:"bytes,16,rep,name=audit_entries,json=auditEntries" json:"audit_entries,omitempty"`
	TeamAbbreviation     *string                          `protobuf:"bytes,17,opt,name=team_abbreviation,json=teamAbbreviation" json:"team_abbreviation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *CMsgDOTAPlayerInfo) Reset()         { *m = CMsgDOTAPlayerInfo{} }
func (m *CMsgDOTAPlayerInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAPlayerInfo) ProtoMessage()    {}
func (*CMsgDOTAPlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{0}
}

func (m *CMsgDOTAPlayerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAPlayerInfo.Unmarshal(m, b)
}
func (m *CMsgDOTAPlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAPlayerInfo.Marshal(b, m, deterministic)
}
func (m *CMsgDOTAPlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAPlayerInfo.Merge(m, src)
}
func (m *CMsgDOTAPlayerInfo) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAPlayerInfo.Size(m)
}
func (m *CMsgDOTAPlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAPlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAPlayerInfo proto.InternalMessageInfo

const Default_CMsgDOTAPlayerInfo_FantasyRole Fantasy_Roles = Fantasy_Roles_FANTASY_ROLE_UNDEFINED

func (m *CMsgDOTAPlayerInfo) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAPlayerInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTAPlayerInfo) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *CMsgDOTAPlayerInfo) GetFantasyRole() Fantasy_Roles {
	if m != nil && m.FantasyRole != nil {
		return *m.FantasyRole
	}
	return Default_CMsgDOTAPlayerInfo_FantasyRole
}

func (m *CMsgDOTAPlayerInfo) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgDOTAPlayerInfo) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTAPlayerInfo) GetTeamTag() string {
	if m != nil && m.TeamTag != nil {
		return *m.TeamTag
	}
	return ""
}

func (m *CMsgDOTAPlayerInfo) GetSponsor() string {
	if m != nil && m.Sponsor != nil {
		return *m.Sponsor
	}
	return ""
}

func (m *CMsgDOTAPlayerInfo) GetIsLocked() bool {
	if m != nil && m.IsLocked != nil {
		return *m.IsLocked
	}
	return false
}

func (m *CMsgDOTAPlayerInfo) GetIsPro() bool {
	if m != nil && m.IsPro != nil {
		return *m.IsPro
	}
	return false
}

func (m *CMsgDOTAPlayerInfo) GetRealName() string {
	if m != nil && m.RealName != nil {
		return *m.RealName
	}
	return ""
}

func (m *CMsgDOTAPlayerInfo) GetTotalEarnings() uint32 {
	if m != nil && m.TotalEarnings != nil {
		return *m.TotalEarnings
	}
	return 0
}

func (m *CMsgDOTAPlayerInfo) GetResults() []*CMsgDOTAPlayerInfo_Results {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *CMsgDOTAPlayerInfo) GetTeamUrlLogo() string {
	if m != nil && m.TeamUrlLogo != nil {
		return *m.TeamUrlLogo
	}
	return ""
}

func (m *CMsgDOTAPlayerInfo) GetAuditEntries() []*CMsgDOTAPlayerInfo_AuditEntry {
	if m != nil {
		return m.AuditEntries
	}
	return nil
}

func (m *CMsgDOTAPlayerInfo) GetTeamAbbreviation() string {
	if m != nil && m.TeamAbbreviation != nil {
		return *m.TeamAbbreviation
	}
	return ""
}

type CMsgDOTAPlayerInfo_Results struct {
	LeagueId             *uint32  `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Placement            *uint32  `protobuf:"varint,2,opt,name=placement" json:"placement,omitempty"`
	Earnings             *uint32  `protobuf:"varint,3,opt,name=earnings" json:"earnings,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTAPlayerInfo_Results) Reset()         { *m = CMsgDOTAPlayerInfo_Results{} }
func (m *CMsgDOTAPlayerInfo_Results) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAPlayerInfo_Results) ProtoMessage()    {}
func (*CMsgDOTAPlayerInfo_Results) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{0, 0}
}

func (m *CMsgDOTAPlayerInfo_Results) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAPlayerInfo_Results.Unmarshal(m, b)
}
func (m *CMsgDOTAPlayerInfo_Results) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAPlayerInfo_Results.Marshal(b, m, deterministic)
}
func (m *CMsgDOTAPlayerInfo_Results) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAPlayerInfo_Results.Merge(m, src)
}
func (m *CMsgDOTAPlayerInfo_Results) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAPlayerInfo_Results.Size(m)
}
func (m *CMsgDOTAPlayerInfo_Results) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAPlayerInfo_Results.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAPlayerInfo_Results proto.InternalMessageInfo

func (m *CMsgDOTAPlayerInfo_Results) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTAPlayerInfo_Results) GetPlacement() uint32 {
	if m != nil && m.Placement != nil {
		return *m.Placement
	}
	return 0
}

func (m *CMsgDOTAPlayerInfo_Results) GetEarnings() uint32 {
	if m != nil && m.Earnings != nil {
		return *m.Earnings
	}
	return 0
}

type CMsgDOTAPlayerInfo_AuditEntry struct {
	StartTimestamp       *uint32  `protobuf:"varint,1,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp         *uint32  `protobuf:"varint,2,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
	TeamId               *uint32  `protobuf:"varint,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName             *string  `protobuf:"bytes,4,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamTag              *string  `protobuf:"bytes,5,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	TeamUrlLogo          *string  `protobuf:"bytes,6,opt,name=team_url_logo,json=teamUrlLogo" json:"team_url_logo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTAPlayerInfo_AuditEntry) Reset()         { *m = CMsgDOTAPlayerInfo_AuditEntry{} }
func (m *CMsgDOTAPlayerInfo_AuditEntry) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAPlayerInfo_AuditEntry) ProtoMessage()    {}
func (*CMsgDOTAPlayerInfo_AuditEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{0, 1}
}

func (m *CMsgDOTAPlayerInfo_AuditEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAPlayerInfo_AuditEntry.Unmarshal(m, b)
}
func (m *CMsgDOTAPlayerInfo_AuditEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAPlayerInfo_AuditEntry.Marshal(b, m, deterministic)
}
func (m *CMsgDOTAPlayerInfo_AuditEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAPlayerInfo_AuditEntry.Merge(m, src)
}
func (m *CMsgDOTAPlayerInfo_AuditEntry) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAPlayerInfo_AuditEntry.Size(m)
}
func (m *CMsgDOTAPlayerInfo_AuditEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAPlayerInfo_AuditEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAPlayerInfo_AuditEntry proto.InternalMessageInfo

func (m *CMsgDOTAPlayerInfo_AuditEntry) GetStartTimestamp() uint32 {
	if m != nil && m.StartTimestamp != nil {
		return *m.StartTimestamp
	}
	return 0
}

func (m *CMsgDOTAPlayerInfo_AuditEntry) GetEndTimestamp() uint32 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *CMsgDOTAPlayerInfo_AuditEntry) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgDOTAPlayerInfo_AuditEntry) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTAPlayerInfo_AuditEntry) GetTeamTag() string {
	if m != nil && m.TeamTag != nil {
		return *m.TeamTag
	}
	return ""
}

func (m *CMsgDOTAPlayerInfo_AuditEntry) GetTeamUrlLogo() string {
	if m != nil && m.TeamUrlLogo != nil {
		return *m.TeamUrlLogo
	}
	return ""
}

type CMsgDOTAPlayerInfoList struct {
	PlayerInfos          []*CMsgDOTAPlayerInfo `protobuf:"bytes,1,rep,name=player_infos,json=playerInfos" json:"player_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CMsgDOTAPlayerInfoList) Reset()         { *m = CMsgDOTAPlayerInfoList{} }
func (m *CMsgDOTAPlayerInfoList) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAPlayerInfoList) ProtoMessage()    {}
func (*CMsgDOTAPlayerInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{1}
}

func (m *CMsgDOTAPlayerInfoList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAPlayerInfoList.Unmarshal(m, b)
}
func (m *CMsgDOTAPlayerInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAPlayerInfoList.Marshal(b, m, deterministic)
}
func (m *CMsgDOTAPlayerInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAPlayerInfoList.Merge(m, src)
}
func (m *CMsgDOTAPlayerInfoList) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAPlayerInfoList.Size(m)
}
func (m *CMsgDOTAPlayerInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAPlayerInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAPlayerInfoList proto.InternalMessageInfo

func (m *CMsgDOTAPlayerInfoList) GetPlayerInfos() []*CMsgDOTAPlayerInfo {
	if m != nil {
		return m.PlayerInfos
	}
	return nil
}

type CMsgDOTATeamRoster struct {
	Timestamp            *uint32  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	TeamId               *uint32  `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	MemberAccountIds     []uint32 `protobuf:"varint,3,rep,name=member_account_ids,json=memberAccountIds" json:"member_account_ids,omitempty"`
	CoachAccountId       *uint32  `protobuf:"varint,4,opt,name=coach_account_id,json=coachAccountId" json:"coach_account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTATeamRoster) Reset()         { *m = CMsgDOTATeamRoster{} }
func (m *CMsgDOTATeamRoster) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTATeamRoster) ProtoMessage()    {}
func (*CMsgDOTATeamRoster) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{2}
}

func (m *CMsgDOTATeamRoster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTATeamRoster.Unmarshal(m, b)
}
func (m *CMsgDOTATeamRoster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTATeamRoster.Marshal(b, m, deterministic)
}
func (m *CMsgDOTATeamRoster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTATeamRoster.Merge(m, src)
}
func (m *CMsgDOTATeamRoster) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTATeamRoster.Size(m)
}
func (m *CMsgDOTATeamRoster) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTATeamRoster.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTATeamRoster proto.InternalMessageInfo

func (m *CMsgDOTATeamRoster) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTATeamRoster) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgDOTATeamRoster) GetMemberAccountIds() []uint32 {
	if m != nil {
		return m.MemberAccountIds
	}
	return nil
}

func (m *CMsgDOTATeamRoster) GetCoachAccountId() uint32 {
	if m != nil && m.CoachAccountId != nil {
		return *m.CoachAccountId
	}
	return 0
}

type CMsgDOTADPCProfileInfo struct {
	PlayerInfo            *CMsgDOTAPlayerInfo                    `protobuf:"bytes,1,opt,name=player_info,json=playerInfo" json:"player_info,omitempty"`
	PredictionInfo        *CMsgDOTADPCProfileInfo_PredictionInfo `protobuf:"bytes,2,opt,name=prediction_info,json=predictionInfo" json:"prediction_info,omitempty"`
	FantasyInfo           *CMsgDOTADPCProfileInfo_FantasyInfo    `protobuf:"bytes,3,opt,name=fantasy_info,json=fantasyInfo" json:"fantasy_info,omitempty"`
	DisabledNotifications []uint32                               `protobuf:"varint,4,rep,name=disabled_notifications,json=disabledNotifications" json:"disabled_notifications,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                               `json:"-"`
	XXX_unrecognized      []byte                                 `json:"-"`
	XXX_sizecache         int32                                  `json:"-"`
}

func (m *CMsgDOTADPCProfileInfo) Reset()         { *m = CMsgDOTADPCProfileInfo{} }
func (m *CMsgDOTADPCProfileInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTADPCProfileInfo) ProtoMessage()    {}
func (*CMsgDOTADPCProfileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{3}
}

func (m *CMsgDOTADPCProfileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTADPCProfileInfo.Unmarshal(m, b)
}
func (m *CMsgDOTADPCProfileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTADPCProfileInfo.Marshal(b, m, deterministic)
}
func (m *CMsgDOTADPCProfileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTADPCProfileInfo.Merge(m, src)
}
func (m *CMsgDOTADPCProfileInfo) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTADPCProfileInfo.Size(m)
}
func (m *CMsgDOTADPCProfileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTADPCProfileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTADPCProfileInfo proto.InternalMessageInfo

func (m *CMsgDOTADPCProfileInfo) GetPlayerInfo() *CMsgDOTAPlayerInfo {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

func (m *CMsgDOTADPCProfileInfo) GetPredictionInfo() *CMsgDOTADPCProfileInfo_PredictionInfo {
	if m != nil {
		return m.PredictionInfo
	}
	return nil
}

func (m *CMsgDOTADPCProfileInfo) GetFantasyInfo() *CMsgDOTADPCProfileInfo_FantasyInfo {
	if m != nil {
		return m.FantasyInfo
	}
	return nil
}

func (m *CMsgDOTADPCProfileInfo) GetDisabledNotifications() []uint32 {
	if m != nil {
		return m.DisabledNotifications
	}
	return nil
}

type CMsgDOTADPCProfileInfo_PredictionInfo struct {
	Percent              *uint32  `protobuf:"varint,1,opt,name=percent" json:"percent,omitempty"`
	ShardWinnings        *int32   `protobuf:"varint,2,opt,name=shard_winnings,json=shardWinnings" json:"shard_winnings,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTADPCProfileInfo_PredictionInfo) Reset()         { *m = CMsgDOTADPCProfileInfo_PredictionInfo{} }
func (m *CMsgDOTADPCProfileInfo_PredictionInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTADPCProfileInfo_PredictionInfo) ProtoMessage()    {}
func (*CMsgDOTADPCProfileInfo_PredictionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{3, 0}
}

func (m *CMsgDOTADPCProfileInfo_PredictionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTADPCProfileInfo_PredictionInfo.Unmarshal(m, b)
}
func (m *CMsgDOTADPCProfileInfo_PredictionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTADPCProfileInfo_PredictionInfo.Marshal(b, m, deterministic)
}
func (m *CMsgDOTADPCProfileInfo_PredictionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTADPCProfileInfo_PredictionInfo.Merge(m, src)
}
func (m *CMsgDOTADPCProfileInfo_PredictionInfo) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTADPCProfileInfo_PredictionInfo.Size(m)
}
func (m *CMsgDOTADPCProfileInfo_PredictionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTADPCProfileInfo_PredictionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTADPCProfileInfo_PredictionInfo proto.InternalMessageInfo

func (m *CMsgDOTADPCProfileInfo_PredictionInfo) GetPercent() uint32 {
	if m != nil && m.Percent != nil {
		return *m.Percent
	}
	return 0
}

func (m *CMsgDOTADPCProfileInfo_PredictionInfo) GetShardWinnings() int32 {
	if m != nil && m.ShardWinnings != nil {
		return *m.ShardWinnings
	}
	return 0
}

type CMsgDOTADPCProfileInfo_FantasyInfo struct {
	Top_90Finishes       *uint32  `protobuf:"varint,1,opt,name=top_90_finishes,json=top90Finishes" json:"top_90_finishes,omitempty"`
	Top_75Finishes       *uint32  `protobuf:"varint,2,opt,name=top_75_finishes,json=top75Finishes" json:"top_75_finishes,omitempty"`
	Top_50Finishes       *uint32  `protobuf:"varint,3,opt,name=top_50_finishes,json=top50Finishes" json:"top_50_finishes,omitempty"`
	ShardWinnings        *uint32  `protobuf:"varint,4,opt,name=shard_winnings,json=shardWinnings" json:"shard_winnings,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTADPCProfileInfo_FantasyInfo) Reset()         { *m = CMsgDOTADPCProfileInfo_FantasyInfo{} }
func (m *CMsgDOTADPCProfileInfo_FantasyInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTADPCProfileInfo_FantasyInfo) ProtoMessage()    {}
func (*CMsgDOTADPCProfileInfo_FantasyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{3, 1}
}

func (m *CMsgDOTADPCProfileInfo_FantasyInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTADPCProfileInfo_FantasyInfo.Unmarshal(m, b)
}
func (m *CMsgDOTADPCProfileInfo_FantasyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTADPCProfileInfo_FantasyInfo.Marshal(b, m, deterministic)
}
func (m *CMsgDOTADPCProfileInfo_FantasyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTADPCProfileInfo_FantasyInfo.Merge(m, src)
}
func (m *CMsgDOTADPCProfileInfo_FantasyInfo) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTADPCProfileInfo_FantasyInfo.Size(m)
}
func (m *CMsgDOTADPCProfileInfo_FantasyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTADPCProfileInfo_FantasyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTADPCProfileInfo_FantasyInfo proto.InternalMessageInfo

func (m *CMsgDOTADPCProfileInfo_FantasyInfo) GetTop_90Finishes() uint32 {
	if m != nil && m.Top_90Finishes != nil {
		return *m.Top_90Finishes
	}
	return 0
}

func (m *CMsgDOTADPCProfileInfo_FantasyInfo) GetTop_75Finishes() uint32 {
	if m != nil && m.Top_75Finishes != nil {
		return *m.Top_75Finishes
	}
	return 0
}

func (m *CMsgDOTADPCProfileInfo_FantasyInfo) GetTop_50Finishes() uint32 {
	if m != nil && m.Top_50Finishes != nil {
		return *m.Top_50Finishes
	}
	return 0
}

func (m *CMsgDOTADPCProfileInfo_FantasyInfo) GetShardWinnings() uint32 {
	if m != nil && m.ShardWinnings != nil {
		return *m.ShardWinnings
	}
	return 0
}

type CMsgDOTALeaderboards struct {
	Leaderboards         []*CMsgDOTALeaderboards_RegionLeaderboard `protobuf:"bytes,2,rep,name=leaderboards" json:"leaderboards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *CMsgDOTALeaderboards) Reset()         { *m = CMsgDOTALeaderboards{} }
func (m *CMsgDOTALeaderboards) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeaderboards) ProtoMessage()    {}
func (*CMsgDOTALeaderboards) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{4}
}

func (m *CMsgDOTALeaderboards) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeaderboards.Unmarshal(m, b)
}
func (m *CMsgDOTALeaderboards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeaderboards.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeaderboards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeaderboards.Merge(m, src)
}
func (m *CMsgDOTALeaderboards) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeaderboards.Size(m)
}
func (m *CMsgDOTALeaderboards) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeaderboards.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeaderboards proto.InternalMessageInfo

func (m *CMsgDOTALeaderboards) GetLeaderboards() []*CMsgDOTALeaderboards_RegionLeaderboard {
	if m != nil {
		return m.Leaderboards
	}
	return nil
}

type CMsgDOTALeaderboards_RegionLeaderboard struct {
	Division             *uint32  `protobuf:"varint,1,opt,name=division" json:"division,omitempty"`
	AccountIds           []uint32 `protobuf:"varint,2,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTALeaderboards_RegionLeaderboard) Reset() {
	*m = CMsgDOTALeaderboards_RegionLeaderboard{}
}
func (m *CMsgDOTALeaderboards_RegionLeaderboard) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeaderboards_RegionLeaderboard) ProtoMessage()    {}
func (*CMsgDOTALeaderboards_RegionLeaderboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{4, 0}
}

func (m *CMsgDOTALeaderboards_RegionLeaderboard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeaderboards_RegionLeaderboard.Unmarshal(m, b)
}
func (m *CMsgDOTALeaderboards_RegionLeaderboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeaderboards_RegionLeaderboard.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeaderboards_RegionLeaderboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeaderboards_RegionLeaderboard.Merge(m, src)
}
func (m *CMsgDOTALeaderboards_RegionLeaderboard) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeaderboards_RegionLeaderboard.Size(m)
}
func (m *CMsgDOTALeaderboards_RegionLeaderboard) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeaderboards_RegionLeaderboard.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeaderboards_RegionLeaderboard proto.InternalMessageInfo

func (m *CMsgDOTALeaderboards_RegionLeaderboard) GetDivision() uint32 {
	if m != nil && m.Division != nil {
		return *m.Division
	}
	return 0
}

func (m *CMsgDOTALeaderboards_RegionLeaderboard) GetAccountIds() []uint32 {
	if m != nil {
		return m.AccountIds
	}
	return nil
}

type CMsgDOTAPassportVoteTeamGuess struct {
	LeagueId             *uint32  `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	WinnerId             *uint32  `protobuf:"varint,2,opt,name=winner_id,json=winnerId" json:"winner_id,omitempty"`
	RunnerupId           *uint32  `protobuf:"varint,3,opt,name=runnerup_id,json=runnerupId" json:"runnerup_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTAPassportVoteTeamGuess) Reset()         { *m = CMsgDOTAPassportVoteTeamGuess{} }
func (m *CMsgDOTAPassportVoteTeamGuess) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAPassportVoteTeamGuess) ProtoMessage()    {}
func (*CMsgDOTAPassportVoteTeamGuess) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{5}
}

func (m *CMsgDOTAPassportVoteTeamGuess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAPassportVoteTeamGuess.Unmarshal(m, b)
}
func (m *CMsgDOTAPassportVoteTeamGuess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAPassportVoteTeamGuess.Marshal(b, m, deterministic)
}
func (m *CMsgDOTAPassportVoteTeamGuess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAPassportVoteTeamGuess.Merge(m, src)
}
func (m *CMsgDOTAPassportVoteTeamGuess) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAPassportVoteTeamGuess.Size(m)
}
func (m *CMsgDOTAPassportVoteTeamGuess) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAPassportVoteTeamGuess.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAPassportVoteTeamGuess proto.InternalMessageInfo

func (m *CMsgDOTAPassportVoteTeamGuess) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTAPassportVoteTeamGuess) GetWinnerId() uint32 {
	if m != nil && m.WinnerId != nil {
		return *m.WinnerId
	}
	return 0
}

func (m *CMsgDOTAPassportVoteTeamGuess) GetRunnerupId() uint32 {
	if m != nil && m.RunnerupId != nil {
		return *m.RunnerupId
	}
	return 0
}

type CMsgDOTAPassportVoteGenericSelection struct {
	SelectionIndex       *DOTA_2013PassportSelectionIndices `protobuf:"varint,1,opt,name=selection_index,json=selectionIndex,enum=protocol.DOTA_2013PassportSelectionIndices,def=0" json:"selection_index,omitempty"`
	Selection            *uint32                            `protobuf:"varint,2,opt,name=selection" json:"selection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *CMsgDOTAPassportVoteGenericSelection) Reset()         { *m = CMsgDOTAPassportVoteGenericSelection{} }
func (m *CMsgDOTAPassportVoteGenericSelection) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAPassportVoteGenericSelection) ProtoMessage()    {}
func (*CMsgDOTAPassportVoteGenericSelection) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{6}
}

func (m *CMsgDOTAPassportVoteGenericSelection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAPassportVoteGenericSelection.Unmarshal(m, b)
}
func (m *CMsgDOTAPassportVoteGenericSelection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAPassportVoteGenericSelection.Marshal(b, m, deterministic)
}
func (m *CMsgDOTAPassportVoteGenericSelection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAPassportVoteGenericSelection.Merge(m, src)
}
func (m *CMsgDOTAPassportVoteGenericSelection) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAPassportVoteGenericSelection.Size(m)
}
func (m *CMsgDOTAPassportVoteGenericSelection) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAPassportVoteGenericSelection.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAPassportVoteGenericSelection proto.InternalMessageInfo

const Default_CMsgDOTAPassportVoteGenericSelection_SelectionIndex DOTA_2013PassportSelectionIndices = DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_0

func (m *CMsgDOTAPassportVoteGenericSelection) GetSelectionIndex() DOTA_2013PassportSelectionIndices {
	if m != nil && m.SelectionIndex != nil {
		return *m.SelectionIndex
	}
	return Default_CMsgDOTAPassportVoteGenericSelection_SelectionIndex
}

func (m *CMsgDOTAPassportVoteGenericSelection) GetSelection() uint32 {
	if m != nil && m.Selection != nil {
		return *m.Selection
	}
	return 0
}

type CMsgDOTAPassportStampedPlayer struct {
	SteamId              *uint64  `protobuf:"varint,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	StampLevel           *uint32  `protobuf:"varint,2,opt,name=stamp_level,json=stampLevel" json:"stamp_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTAPassportStampedPlayer) Reset()         { *m = CMsgDOTAPassportStampedPlayer{} }
func (m *CMsgDOTAPassportStampedPlayer) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAPassportStampedPlayer) ProtoMessage()    {}
func (*CMsgDOTAPassportStampedPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{7}
}

func (m *CMsgDOTAPassportStampedPlayer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAPassportStampedPlayer.Unmarshal(m, b)
}
func (m *CMsgDOTAPassportStampedPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAPassportStampedPlayer.Marshal(b, m, deterministic)
}
func (m *CMsgDOTAPassportStampedPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAPassportStampedPlayer.Merge(m, src)
}
func (m *CMsgDOTAPassportStampedPlayer) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAPassportStampedPlayer.Size(m)
}
func (m *CMsgDOTAPassportStampedPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAPassportStampedPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAPassportStampedPlayer proto.InternalMessageInfo

func (m *CMsgDOTAPassportStampedPlayer) GetSteamId() uint64 {
	if m != nil && m.SteamId != nil {
		return *m.SteamId
	}
	return 0
}

func (m *CMsgDOTAPassportStampedPlayer) GetStampLevel() uint32 {
	if m != nil && m.StampLevel != nil {
		return *m.StampLevel
	}
	return 0
}

type CMsgDOTAPassportPlayerCardChallenge struct {
	ChallengeId          *uint32  `protobuf:"varint,1,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTAPassportPlayerCardChallenge) Reset()         { *m = CMsgDOTAPassportPlayerCardChallenge{} }
func (m *CMsgDOTAPassportPlayerCardChallenge) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAPassportPlayerCardChallenge) ProtoMessage()    {}
func (*CMsgDOTAPassportPlayerCardChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{8}
}

func (m *CMsgDOTAPassportPlayerCardChallenge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAPassportPlayerCardChallenge.Unmarshal(m, b)
}
func (m *CMsgDOTAPassportPlayerCardChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAPassportPlayerCardChallenge.Marshal(b, m, deterministic)
}
func (m *CMsgDOTAPassportPlayerCardChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAPassportPlayerCardChallenge.Merge(m, src)
}
func (m *CMsgDOTAPassportPlayerCardChallenge) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAPassportPlayerCardChallenge.Size(m)
}
func (m *CMsgDOTAPassportPlayerCardChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAPassportPlayerCardChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAPassportPlayerCardChallenge proto.InternalMessageInfo

func (m *CMsgDOTAPassportPlayerCardChallenge) GetChallengeId() uint32 {
	if m != nil && m.ChallengeId != nil {
		return *m.ChallengeId
	}
	return 0
}

type CMsgDOTAPassportVote struct {
	TeamVotes            []*CMsgDOTAPassportVoteTeamGuess        `protobuf:"bytes,1,rep,name=team_votes,json=teamVotes" json:"team_votes,omitempty"`
	GenericSelections    []*CMsgDOTAPassportVoteGenericSelection `protobuf:"bytes,2,rep,name=generic_selections,json=genericSelections" json:"generic_selections,omitempty"`
	StampedPlayers       []*CMsgDOTAPassportStampedPlayer        `protobuf:"bytes,3,rep,name=stamped_players,json=stampedPlayers" json:"stamped_players,omitempty"`
	PlayerCardChallenges []*CMsgDOTAPassportPlayerCardChallenge  `protobuf:"bytes,4,rep,name=player_card_challenges,json=playerCardChallenges" json:"player_card_challenges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *CMsgDOTAPassportVote) Reset()         { *m = CMsgDOTAPassportVote{} }
func (m *CMsgDOTAPassportVote) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAPassportVote) ProtoMessage()    {}
func (*CMsgDOTAPassportVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{9}
}

func (m *CMsgDOTAPassportVote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAPassportVote.Unmarshal(m, b)
}
func (m *CMsgDOTAPassportVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAPassportVote.Marshal(b, m, deterministic)
}
func (m *CMsgDOTAPassportVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAPassportVote.Merge(m, src)
}
func (m *CMsgDOTAPassportVote) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAPassportVote.Size(m)
}
func (m *CMsgDOTAPassportVote) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAPassportVote.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAPassportVote proto.InternalMessageInfo

func (m *CMsgDOTAPassportVote) GetTeamVotes() []*CMsgDOTAPassportVoteTeamGuess {
	if m != nil {
		return m.TeamVotes
	}
	return nil
}

func (m *CMsgDOTAPassportVote) GetGenericSelections() []*CMsgDOTAPassportVoteGenericSelection {
	if m != nil {
		return m.GenericSelections
	}
	return nil
}

func (m *CMsgDOTAPassportVote) GetStampedPlayers() []*CMsgDOTAPassportStampedPlayer {
	if m != nil {
		return m.StampedPlayers
	}
	return nil
}

func (m *CMsgDOTAPassportVote) GetPlayerCardChallenges() []*CMsgDOTAPassportPlayerCardChallenge {
	if m != nil {
		return m.PlayerCardChallenges
	}
	return nil
}

type CMsgClientToGCGetPlayerCardRosterRequest struct {
	LeagueId             *uint32  `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	FantasyPeriod        *uint32  `protobuf:"varint,3,opt,name=fantasy_period,json=fantasyPeriod" json:"fantasy_period,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgClientToGCGetPlayerCardRosterRequest) Reset() {
	*m = CMsgClientToGCGetPlayerCardRosterRequest{}
}
func (m *CMsgClientToGCGetPlayerCardRosterRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgClientToGCGetPlayerCardRosterRequest) ProtoMessage()    {}
func (*CMsgClientToGCGetPlayerCardRosterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{10}
}

func (m *CMsgClientToGCGetPlayerCardRosterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgClientToGCGetPlayerCardRosterRequest.Unmarshal(m, b)
}
func (m *CMsgClientToGCGetPlayerCardRosterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgClientToGCGetPlayerCardRosterRequest.Marshal(b, m, deterministic)
}
func (m *CMsgClientToGCGetPlayerCardRosterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgClientToGCGetPlayerCardRosterRequest.Merge(m, src)
}
func (m *CMsgClientToGCGetPlayerCardRosterRequest) XXX_Size() int {
	return xxx_messageInfo_CMsgClientToGCGetPlayerCardRosterRequest.Size(m)
}
func (m *CMsgClientToGCGetPlayerCardRosterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgClientToGCGetPlayerCardRosterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgClientToGCGetPlayerCardRosterRequest proto.InternalMessageInfo

func (m *CMsgClientToGCGetPlayerCardRosterRequest) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgClientToGCGetPlayerCardRosterRequest) GetFantasyPeriod() uint32 {
	if m != nil && m.FantasyPeriod != nil {
		return *m.FantasyPeriod
	}
	return 0
}

type CMsgClientToGCGetPlayerCardRosterResponse struct {
	Result               *CMsgClientToGCGetPlayerCardRosterResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCGetPlayerCardRosterResponse_Result,def=0" json:"result,omitempty"`
	PlayerCardItemId     []uint64                                          `protobuf:"varint,2,rep,name=player_card_item_id,json=playerCardItemId" json:"player_card_item_id,omitempty"`
	Score                *float32                                          `protobuf:"fixed32,3,opt,name=score" json:"score,omitempty"`
	Finalized            *bool                                             `protobuf:"varint,4,opt,name=finalized" json:"finalized,omitempty"`
	Percentile           *float32                                          `protobuf:"fixed32,5,opt,name=percentile" json:"percentile,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *CMsgClientToGCGetPlayerCardRosterResponse) Reset() {
	*m = CMsgClientToGCGetPlayerCardRosterResponse{}
}
func (m *CMsgClientToGCGetPlayerCardRosterResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgClientToGCGetPlayerCardRosterResponse) ProtoMessage() {}
func (*CMsgClientToGCGetPlayerCardRosterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{11}
}

func (m *CMsgClientToGCGetPlayerCardRosterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgClientToGCGetPlayerCardRosterResponse.Unmarshal(m, b)
}
func (m *CMsgClientToGCGetPlayerCardRosterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgClientToGCGetPlayerCardRosterResponse.Marshal(b, m, deterministic)
}
func (m *CMsgClientToGCGetPlayerCardRosterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgClientToGCGetPlayerCardRosterResponse.Merge(m, src)
}
func (m *CMsgClientToGCGetPlayerCardRosterResponse) XXX_Size() int {
	return xxx_messageInfo_CMsgClientToGCGetPlayerCardRosterResponse.Size(m)
}
func (m *CMsgClientToGCGetPlayerCardRosterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgClientToGCGetPlayerCardRosterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgClientToGCGetPlayerCardRosterResponse proto.InternalMessageInfo

const Default_CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse_Result = CMsgClientToGCGetPlayerCardRosterResponse_SUCCESS

func (m *CMsgClientToGCGetPlayerCardRosterResponse) GetResult() CMsgClientToGCGetPlayerCardRosterResponse_Result {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgClientToGCGetPlayerCardRosterResponse_Result
}

func (m *CMsgClientToGCGetPlayerCardRosterResponse) GetPlayerCardItemId() []uint64 {
	if m != nil {
		return m.PlayerCardItemId
	}
	return nil
}

func (m *CMsgClientToGCGetPlayerCardRosterResponse) GetScore() float32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CMsgClientToGCGetPlayerCardRosterResponse) GetFinalized() bool {
	if m != nil && m.Finalized != nil {
		return *m.Finalized
	}
	return false
}

func (m *CMsgClientToGCGetPlayerCardRosterResponse) GetPercentile() float32 {
	if m != nil && m.Percentile != nil {
		return *m.Percentile
	}
	return 0
}

type CMsgClientToGCBatchGetPlayerCardRosterRequest struct {
	LeagueTimestamps     []*CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp `protobuf:"bytes,1,rep,name=league_timestamps,json=leagueTimestamps" json:"league_timestamps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                         `json:"-"`
	XXX_unrecognized     []byte                                                           `json:"-"`
	XXX_sizecache        int32                                                            `json:"-"`
}

func (m *CMsgClientToGCBatchGetPlayerCardRosterRequest) Reset() {
	*m = CMsgClientToGCBatchGetPlayerCardRosterRequest{}
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterRequest) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgClientToGCBatchGetPlayerCardRosterRequest) ProtoMessage() {}
func (*CMsgClientToGCBatchGetPlayerCardRosterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{12}
}

func (m *CMsgClientToGCBatchGetPlayerCardRosterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterRequest.Unmarshal(m, b)
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterRequest.Marshal(b, m, deterministic)
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterRequest.Merge(m, src)
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterRequest) XXX_Size() int {
	return xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterRequest.Size(m)
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterRequest proto.InternalMessageInfo

func (m *CMsgClientToGCBatchGetPlayerCardRosterRequest) GetLeagueTimestamps() []*CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp {
	if m != nil {
		return m.LeagueTimestamps
	}
	return nil
}

type CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp struct {
	LeagueId             *uint32  `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	FantasyPeriod        *uint32  `protobuf:"varint,3,opt,name=fantasy_period,json=fantasyPeriod" json:"fantasy_period,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp) Reset() {
	*m = CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp{}
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp) ProtoMessage() {}
func (*CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{12, 0}
}

func (m *CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp.Unmarshal(m, b)
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp.Marshal(b, m, deterministic)
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp.Merge(m, src)
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp) XXX_Size() int {
	return xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp.Size(m)
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp proto.InternalMessageInfo

func (m *CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp) GetFantasyPeriod() uint32 {
	if m != nil && m.FantasyPeriod != nil {
		return *m.FantasyPeriod
	}
	return 0
}

type CMsgClientToGCBatchGetPlayerCardRosterResponse struct {
	Responses            []*CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                         `json:"-"`
	XXX_unrecognized     []byte                                                           `json:"-"`
	XXX_sizecache        int32                                                            `json:"-"`
}

func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse) Reset() {
	*m = CMsgClientToGCBatchGetPlayerCardRosterResponse{}
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgClientToGCBatchGetPlayerCardRosterResponse) ProtoMessage() {}
func (*CMsgClientToGCBatchGetPlayerCardRosterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{13}
}

func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterResponse.Unmarshal(m, b)
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterResponse.Marshal(b, m, deterministic)
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterResponse.Merge(m, src)
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse) XXX_Size() int {
	return xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterResponse.Size(m)
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterResponse proto.InternalMessageInfo

func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse) GetResponses() []*CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse struct {
	LeagueId             *uint32                                                `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	DeprecatedTimestamp  *uint32                                                `protobuf:"varint,2,opt,name=deprecated_timestamp,json=deprecatedTimestamp" json:"deprecated_timestamp,omitempty"`
	Result               *CMsgClientToGCBatchGetPlayerCardRosterResponse_Result `protobuf:"varint,3,opt,name=result,enum=protocol.CMsgClientToGCBatchGetPlayerCardRosterResponse_Result,def=0" json:"result,omitempty"`
	PlayerCardItemId     []uint64                                               `protobuf:"varint,4,rep,name=player_card_item_id,json=playerCardItemId" json:"player_card_item_id,omitempty"`
	Score                *float32                                               `protobuf:"fixed32,5,opt,name=score" json:"score,omitempty"`
	Finalized            *bool                                                  `protobuf:"varint,6,opt,name=finalized" json:"finalized,omitempty"`
	Percentile           *float32                                               `protobuf:"fixed32,7,opt,name=percentile" json:"percentile,omitempty"`
	FantasyPeriod        *uint32                                                `protobuf:"varint,8,opt,name=fantasy_period,json=fantasyPeriod" json:"fantasy_period,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                               `json:"-"`
	XXX_unrecognized     []byte                                                 `json:"-"`
	XXX_sizecache        int32                                                  `json:"-"`
}

func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) Reset() {
	*m = CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse{}
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) ProtoMessage() {}
func (*CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{13, 0}
}

func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse.Unmarshal(m, b)
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse.Marshal(b, m, deterministic)
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse.Merge(m, src)
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) XXX_Size() int {
	return xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse.Size(m)
}
func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse proto.InternalMessageInfo

const Default_CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse_Result CMsgClientToGCBatchGetPlayerCardRosterResponse_Result = CMsgClientToGCBatchGetPlayerCardRosterResponse_SUCCESS

func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) GetDeprecatedTimestamp() uint32 {
	if m != nil && m.DeprecatedTimestamp != nil {
		return *m.DeprecatedTimestamp
	}
	return 0
}

func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) GetResult() CMsgClientToGCBatchGetPlayerCardRosterResponse_Result {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse_Result
}

func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) GetPlayerCardItemId() []uint64 {
	if m != nil {
		return m.PlayerCardItemId
	}
	return nil
}

func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) GetScore() float32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) GetFinalized() bool {
	if m != nil && m.Finalized != nil {
		return *m.Finalized
	}
	return false
}

func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) GetPercentile() float32 {
	if m != nil && m.Percentile != nil {
		return *m.Percentile
	}
	return 0
}

func (m *CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse) GetFantasyPeriod() uint32 {
	if m != nil && m.FantasyPeriod != nil {
		return *m.FantasyPeriod
	}
	return 0
}

type CMsgClientToGCSetPlayerCardRosterRequest struct {
	LeagueId             *uint32  `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	DeprecatedTimestamp  *uint32  `protobuf:"varint,2,opt,name=deprecated_timestamp,json=deprecatedTimestamp" json:"deprecated_timestamp,omitempty"`
	Slot                 *uint32  `protobuf:"varint,3,opt,name=slot" json:"slot,omitempty"`
	PlayerCardItemId     *uint64  `protobuf:"varint,4,opt,name=player_card_item_id,json=playerCardItemId" json:"player_card_item_id,omitempty"`
	EventId              *uint32  `protobuf:"varint,5,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	FantasyPeriod        *uint32  `protobuf:"varint,6,opt,name=fantasy_period,json=fantasyPeriod" json:"fantasy_period,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgClientToGCSetPlayerCardRosterRequest) Reset() {
	*m = CMsgClientToGCSetPlayerCardRosterRequest{}
}
func (m *CMsgClientToGCSetPlayerCardRosterRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgClientToGCSetPlayerCardRosterRequest) ProtoMessage()    {}
func (*CMsgClientToGCSetPlayerCardRosterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{14}
}

func (m *CMsgClientToGCSetPlayerCardRosterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgClientToGCSetPlayerCardRosterRequest.Unmarshal(m, b)
}
func (m *CMsgClientToGCSetPlayerCardRosterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgClientToGCSetPlayerCardRosterRequest.Marshal(b, m, deterministic)
}
func (m *CMsgClientToGCSetPlayerCardRosterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgClientToGCSetPlayerCardRosterRequest.Merge(m, src)
}
func (m *CMsgClientToGCSetPlayerCardRosterRequest) XXX_Size() int {
	return xxx_messageInfo_CMsgClientToGCSetPlayerCardRosterRequest.Size(m)
}
func (m *CMsgClientToGCSetPlayerCardRosterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgClientToGCSetPlayerCardRosterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgClientToGCSetPlayerCardRosterRequest proto.InternalMessageInfo

func (m *CMsgClientToGCSetPlayerCardRosterRequest) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgClientToGCSetPlayerCardRosterRequest) GetDeprecatedTimestamp() uint32 {
	if m != nil && m.DeprecatedTimestamp != nil {
		return *m.DeprecatedTimestamp
	}
	return 0
}

func (m *CMsgClientToGCSetPlayerCardRosterRequest) GetSlot() uint32 {
	if m != nil && m.Slot != nil {
		return *m.Slot
	}
	return 0
}

func (m *CMsgClientToGCSetPlayerCardRosterRequest) GetPlayerCardItemId() uint64 {
	if m != nil && m.PlayerCardItemId != nil {
		return *m.PlayerCardItemId
	}
	return 0
}

func (m *CMsgClientToGCSetPlayerCardRosterRequest) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *CMsgClientToGCSetPlayerCardRosterRequest) GetFantasyPeriod() uint32 {
	if m != nil && m.FantasyPeriod != nil {
		return *m.FantasyPeriod
	}
	return 0
}

type CMsgClientToGCSetPlayerCardRosterResponse struct {
	Result               *CMsgClientToGCSetPlayerCardRosterResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCSetPlayerCardRosterResponse_Result,def=0" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *CMsgClientToGCSetPlayerCardRosterResponse) Reset() {
	*m = CMsgClientToGCSetPlayerCardRosterResponse{}
}
func (m *CMsgClientToGCSetPlayerCardRosterResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgClientToGCSetPlayerCardRosterResponse) ProtoMessage() {}
func (*CMsgClientToGCSetPlayerCardRosterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{15}
}

func (m *CMsgClientToGCSetPlayerCardRosterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgClientToGCSetPlayerCardRosterResponse.Unmarshal(m, b)
}
func (m *CMsgClientToGCSetPlayerCardRosterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgClientToGCSetPlayerCardRosterResponse.Marshal(b, m, deterministic)
}
func (m *CMsgClientToGCSetPlayerCardRosterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgClientToGCSetPlayerCardRosterResponse.Merge(m, src)
}
func (m *CMsgClientToGCSetPlayerCardRosterResponse) XXX_Size() int {
	return xxx_messageInfo_CMsgClientToGCSetPlayerCardRosterResponse.Size(m)
}
func (m *CMsgClientToGCSetPlayerCardRosterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgClientToGCSetPlayerCardRosterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgClientToGCSetPlayerCardRosterResponse proto.InternalMessageInfo

const Default_CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse_Result = CMsgClientToGCSetPlayerCardRosterResponse_SUCCESS

func (m *CMsgClientToGCSetPlayerCardRosterResponse) GetResult() CMsgClientToGCSetPlayerCardRosterResponse_Result {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgClientToGCSetPlayerCardRosterResponse_Result
}

type CMsgDOTAFantasyDPCLeagueStatus struct {
	LeagueInfos          []*CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo `protobuf:"bytes,1,rep,name=league_infos,json=leagueInfos" json:"league_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *CMsgDOTAFantasyDPCLeagueStatus) Reset()         { *m = CMsgDOTAFantasyDPCLeagueStatus{} }
func (m *CMsgDOTAFantasyDPCLeagueStatus) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyDPCLeagueStatus) ProtoMessage()    {}
func (*CMsgDOTAFantasyDPCLeagueStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{16}
}

func (m *CMsgDOTAFantasyDPCLeagueStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAFantasyDPCLeagueStatus.Unmarshal(m, b)
}
func (m *CMsgDOTAFantasyDPCLeagueStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAFantasyDPCLeagueStatus.Marshal(b, m, deterministic)
}
func (m *CMsgDOTAFantasyDPCLeagueStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAFantasyDPCLeagueStatus.Merge(m, src)
}
func (m *CMsgDOTAFantasyDPCLeagueStatus) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAFantasyDPCLeagueStatus.Size(m)
}
func (m *CMsgDOTAFantasyDPCLeagueStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAFantasyDPCLeagueStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAFantasyDPCLeagueStatus proto.InternalMessageInfo

func (m *CMsgDOTAFantasyDPCLeagueStatus) GetLeagueInfos() []*CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo {
	if m != nil {
		return m.LeagueInfos
	}
	return nil
}

type CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo struct {
	LeagueId             *uint32                                       `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	LeagueName           *string                                       `protobuf:"bytes,2,opt,name=league_name,json=leagueName" json:"league_name,omitempty"`
	StartTimestamp       *uint32                                       `protobuf:"varint,3,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp         *uint32                                       `protobuf:"varint,4,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
	DayTimestamps        []uint32                                      `protobuf:"varint,5,rep,name=day_timestamps,json=dayTimestamps" json:"day_timestamps,omitempty"`
	Status               *CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus `protobuf:"varint,8,opt,name=status,enum=protocol.CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus,def=0" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) Reset() {
	*m = CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo{}
}
func (m *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) ProtoMessage() {}
func (*CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{16, 0}
}

func (m *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo.Unmarshal(m, b)
}
func (m *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo.Marshal(b, m, deterministic)
}
func (m *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo.Merge(m, src)
}
func (m *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo.Size(m)
}
func (m *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo proto.InternalMessageInfo

const Default_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_Status CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus = CMsgDOTAFantasyDPCLeagueStatus_UNSET

func (m *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) GetLeagueName() string {
	if m != nil && m.LeagueName != nil {
		return *m.LeagueName
	}
	return ""
}

func (m *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) GetStartTimestamp() uint32 {
	if m != nil && m.StartTimestamp != nil {
		return *m.StartTimestamp
	}
	return 0
}

func (m *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) GetEndTimestamp() uint32 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) GetDayTimestamps() []uint32 {
	if m != nil {
		return m.DayTimestamps
	}
	return nil
}

func (m *CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo) GetStatus() CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_Status
}

type CMsgDOTADPCSearchResults struct {
	Players              []*CMsgDOTADPCSearchResults_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	Teams                []*CMsgDOTADPCSearchResults_Team   `protobuf:"bytes,2,rep,name=teams" json:"teams,omitempty"`
	Leagues              []*CMsgDOTADPCSearchResults_League `protobuf:"bytes,3,rep,name=leagues" json:"leagues,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *CMsgDOTADPCSearchResults) Reset()         { *m = CMsgDOTADPCSearchResults{} }
func (m *CMsgDOTADPCSearchResults) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTADPCSearchResults) ProtoMessage()    {}
func (*CMsgDOTADPCSearchResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{17}
}

func (m *CMsgDOTADPCSearchResults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTADPCSearchResults.Unmarshal(m, b)
}
func (m *CMsgDOTADPCSearchResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTADPCSearchResults.Marshal(b, m, deterministic)
}
func (m *CMsgDOTADPCSearchResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTADPCSearchResults.Merge(m, src)
}
func (m *CMsgDOTADPCSearchResults) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTADPCSearchResults.Size(m)
}
func (m *CMsgDOTADPCSearchResults) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTADPCSearchResults.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTADPCSearchResults proto.InternalMessageInfo

func (m *CMsgDOTADPCSearchResults) GetPlayers() []*CMsgDOTADPCSearchResults_Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CMsgDOTADPCSearchResults) GetTeams() []*CMsgDOTADPCSearchResults_Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *CMsgDOTADPCSearchResults) GetLeagues() []*CMsgDOTADPCSearchResults_League {
	if m != nil {
		return m.Leagues
	}
	return nil
}

type CMsgDOTADPCSearchResults_Player struct {
	Id                   *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	RealName             *string  `protobuf:"bytes,3,opt,name=real_name,json=realName" json:"real_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTADPCSearchResults_Player) Reset()         { *m = CMsgDOTADPCSearchResults_Player{} }
func (m *CMsgDOTADPCSearchResults_Player) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTADPCSearchResults_Player) ProtoMessage()    {}
func (*CMsgDOTADPCSearchResults_Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{17, 0}
}

func (m *CMsgDOTADPCSearchResults_Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTADPCSearchResults_Player.Unmarshal(m, b)
}
func (m *CMsgDOTADPCSearchResults_Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTADPCSearchResults_Player.Marshal(b, m, deterministic)
}
func (m *CMsgDOTADPCSearchResults_Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTADPCSearchResults_Player.Merge(m, src)
}
func (m *CMsgDOTADPCSearchResults_Player) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTADPCSearchResults_Player.Size(m)
}
func (m *CMsgDOTADPCSearchResults_Player) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTADPCSearchResults_Player.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTADPCSearchResults_Player proto.InternalMessageInfo

func (m *CMsgDOTADPCSearchResults_Player) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CMsgDOTADPCSearchResults_Player) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTADPCSearchResults_Player) GetRealName() string {
	if m != nil && m.RealName != nil {
		return *m.RealName
	}
	return ""
}

type CMsgDOTADPCSearchResults_Team struct {
	Id                   *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Url                  *string  `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTADPCSearchResults_Team) Reset()         { *m = CMsgDOTADPCSearchResults_Team{} }
func (m *CMsgDOTADPCSearchResults_Team) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTADPCSearchResults_Team) ProtoMessage()    {}
func (*CMsgDOTADPCSearchResults_Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{17, 1}
}

func (m *CMsgDOTADPCSearchResults_Team) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTADPCSearchResults_Team.Unmarshal(m, b)
}
func (m *CMsgDOTADPCSearchResults_Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTADPCSearchResults_Team.Marshal(b, m, deterministic)
}
func (m *CMsgDOTADPCSearchResults_Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTADPCSearchResults_Team.Merge(m, src)
}
func (m *CMsgDOTADPCSearchResults_Team) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTADPCSearchResults_Team.Size(m)
}
func (m *CMsgDOTADPCSearchResults_Team) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTADPCSearchResults_Team.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTADPCSearchResults_Team proto.InternalMessageInfo

func (m *CMsgDOTADPCSearchResults_Team) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CMsgDOTADPCSearchResults_Team) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTADPCSearchResults_Team) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

type CMsgDOTADPCSearchResults_League struct {
	Id                   *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTADPCSearchResults_League) Reset()         { *m = CMsgDOTADPCSearchResults_League{} }
func (m *CMsgDOTADPCSearchResults_League) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTADPCSearchResults_League) ProtoMessage()    {}
func (*CMsgDOTADPCSearchResults_League) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{17, 2}
}

func (m *CMsgDOTADPCSearchResults_League) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTADPCSearchResults_League.Unmarshal(m, b)
}
func (m *CMsgDOTADPCSearchResults_League) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTADPCSearchResults_League.Marshal(b, m, deterministic)
}
func (m *CMsgDOTADPCSearchResults_League) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTADPCSearchResults_League.Merge(m, src)
}
func (m *CMsgDOTADPCSearchResults_League) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTADPCSearchResults_League.Size(m)
}
func (m *CMsgDOTADPCSearchResults_League) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTADPCSearchResults_League.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTADPCSearchResults_League proto.InternalMessageInfo

func (m *CMsgDOTADPCSearchResults_League) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CMsgDOTADPCSearchResults_League) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type CMsgDOTADPCTeamFavoriteRankings struct {
	Teams                []*CMsgDOTADPCTeamFavoriteRankings_Team `protobuf:"bytes,1,rep,name=teams" json:"teams,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *CMsgDOTADPCTeamFavoriteRankings) Reset()         { *m = CMsgDOTADPCTeamFavoriteRankings{} }
func (m *CMsgDOTADPCTeamFavoriteRankings) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTADPCTeamFavoriteRankings) ProtoMessage()    {}
func (*CMsgDOTADPCTeamFavoriteRankings) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{18}
}

func (m *CMsgDOTADPCTeamFavoriteRankings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTADPCTeamFavoriteRankings.Unmarshal(m, b)
}
func (m *CMsgDOTADPCTeamFavoriteRankings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTADPCTeamFavoriteRankings.Marshal(b, m, deterministic)
}
func (m *CMsgDOTADPCTeamFavoriteRankings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTADPCTeamFavoriteRankings.Merge(m, src)
}
func (m *CMsgDOTADPCTeamFavoriteRankings) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTADPCTeamFavoriteRankings.Size(m)
}
func (m *CMsgDOTADPCTeamFavoriteRankings) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTADPCTeamFavoriteRankings.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTADPCTeamFavoriteRankings proto.InternalMessageInfo

func (m *CMsgDOTADPCTeamFavoriteRankings) GetTeams() []*CMsgDOTADPCTeamFavoriteRankings_Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

type CMsgDOTADPCTeamFavoriteRankings_Team struct {
	TeamId               *uint32  `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Favorites            *uint32  `protobuf:"varint,2,opt,name=favorites" json:"favorites,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTADPCTeamFavoriteRankings_Team) Reset()         { *m = CMsgDOTADPCTeamFavoriteRankings_Team{} }
func (m *CMsgDOTADPCTeamFavoriteRankings_Team) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTADPCTeamFavoriteRankings_Team) ProtoMessage()    {}
func (*CMsgDOTADPCTeamFavoriteRankings_Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad607e4a12cf9d50, []int{18, 0}
}

func (m *CMsgDOTADPCTeamFavoriteRankings_Team) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTADPCTeamFavoriteRankings_Team.Unmarshal(m, b)
}
func (m *CMsgDOTADPCTeamFavoriteRankings_Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTADPCTeamFavoriteRankings_Team.Marshal(b, m, deterministic)
}
func (m *CMsgDOTADPCTeamFavoriteRankings_Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTADPCTeamFavoriteRankings_Team.Merge(m, src)
}
func (m *CMsgDOTADPCTeamFavoriteRankings_Team) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTADPCTeamFavoriteRankings_Team.Size(m)
}
func (m *CMsgDOTADPCTeamFavoriteRankings_Team) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTADPCTeamFavoriteRankings_Team.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTADPCTeamFavoriteRankings_Team proto.InternalMessageInfo

func (m *CMsgDOTADPCTeamFavoriteRankings_Team) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgDOTADPCTeamFavoriteRankings_Team) GetFavorites() uint32 {
	if m != nil && m.Favorites != nil {
		return *m.Favorites
	}
	return 0
}

func init() {
	proto.RegisterEnum("protocol.DOTA_2013PassportSelectionIndices", DOTA_2013PassportSelectionIndices_name, DOTA_2013PassportSelectionIndices_value)
	proto.RegisterEnum("protocol.CMsgClientToGCGetPlayerCardRosterResponse_Result", CMsgClientToGCGetPlayerCardRosterResponse_Result_name, CMsgClientToGCGetPlayerCardRosterResponse_Result_value)
	proto.RegisterEnum("protocol.CMsgClientToGCBatchGetPlayerCardRosterResponse_Result", CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_name, CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_value)
	proto.RegisterEnum("protocol.CMsgClientToGCSetPlayerCardRosterResponse_Result", CMsgClientToGCSetPlayerCardRosterResponse_Result_name, CMsgClientToGCSetPlayerCardRosterResponse_Result_value)
	proto.RegisterEnum("protocol.CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus", CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_name, CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_value)
	proto.RegisterEnum("protocol.CMsgDOTADPCSearchResults_ESearchResultsDesired", CMsgDOTADPCSearchResults_ESearchResultsDesired_name, CMsgDOTADPCSearchResults_ESearchResultsDesired_value)
	proto.RegisterType((*CMsgDOTAPlayerInfo)(nil), "protocol.CMsgDOTAPlayerInfo")
	proto.RegisterType((*CMsgDOTAPlayerInfo_Results)(nil), "protocol.CMsgDOTAPlayerInfo.Results")
	proto.RegisterType((*CMsgDOTAPlayerInfo_AuditEntry)(nil), "protocol.CMsgDOTAPlayerInfo.AuditEntry")
	proto.RegisterType((*CMsgDOTAPlayerInfoList)(nil), "protocol.CMsgDOTAPlayerInfoList")
	proto.RegisterType((*CMsgDOTATeamRoster)(nil), "protocol.CMsgDOTATeamRoster")
	proto.RegisterType((*CMsgDOTADPCProfileInfo)(nil), "protocol.CMsgDOTADPCProfileInfo")
	proto.RegisterType((*CMsgDOTADPCProfileInfo_PredictionInfo)(nil), "protocol.CMsgDOTADPCProfileInfo.PredictionInfo")
	proto.RegisterType((*CMsgDOTADPCProfileInfo_FantasyInfo)(nil), "protocol.CMsgDOTADPCProfileInfo.FantasyInfo")
	proto.RegisterType((*CMsgDOTALeaderboards)(nil), "protocol.CMsgDOTALeaderboards")
	proto.RegisterType((*CMsgDOTALeaderboards_RegionLeaderboard)(nil), "protocol.CMsgDOTALeaderboards.RegionLeaderboard")
	proto.RegisterType((*CMsgDOTAPassportVoteTeamGuess)(nil), "protocol.CMsgDOTAPassportVoteTeamGuess")
	proto.RegisterType((*CMsgDOTAPassportVoteGenericSelection)(nil), "protocol.CMsgDOTAPassportVoteGenericSelection")
	proto.RegisterType((*CMsgDOTAPassportStampedPlayer)(nil), "protocol.CMsgDOTAPassportStampedPlayer")
	proto.RegisterType((*CMsgDOTAPassportPlayerCardChallenge)(nil), "protocol.CMsgDOTAPassportPlayerCardChallenge")
	proto.RegisterType((*CMsgDOTAPassportVote)(nil), "protocol.CMsgDOTAPassportVote")
	proto.RegisterType((*CMsgClientToGCGetPlayerCardRosterRequest)(nil), "protocol.CMsgClientToGCGetPlayerCardRosterRequest")
	proto.RegisterType((*CMsgClientToGCGetPlayerCardRosterResponse)(nil), "protocol.CMsgClientToGCGetPlayerCardRosterResponse")
	proto.RegisterType((*CMsgClientToGCBatchGetPlayerCardRosterRequest)(nil), "protocol.CMsgClientToGCBatchGetPlayerCardRosterRequest")
	proto.RegisterType((*CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp)(nil), "protocol.CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp")
	proto.RegisterType((*CMsgClientToGCBatchGetPlayerCardRosterResponse)(nil), "protocol.CMsgClientToGCBatchGetPlayerCardRosterResponse")
	proto.RegisterType((*CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse)(nil), "protocol.CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse")
	proto.RegisterType((*CMsgClientToGCSetPlayerCardRosterRequest)(nil), "protocol.CMsgClientToGCSetPlayerCardRosterRequest")
	proto.RegisterType((*CMsgClientToGCSetPlayerCardRosterResponse)(nil), "protocol.CMsgClientToGCSetPlayerCardRosterResponse")
	proto.RegisterType((*CMsgDOTAFantasyDPCLeagueStatus)(nil), "protocol.CMsgDOTAFantasyDPCLeagueStatus")
	proto.RegisterType((*CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo)(nil), "protocol.CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo")
	proto.RegisterType((*CMsgDOTADPCSearchResults)(nil), "protocol.CMsgDOTADPCSearchResults")
	proto.RegisterType((*CMsgDOTADPCSearchResults_Player)(nil), "protocol.CMsgDOTADPCSearchResults.Player")
	proto.RegisterType((*CMsgDOTADPCSearchResults_Team)(nil), "protocol.CMsgDOTADPCSearchResults.Team")
	proto.RegisterType((*CMsgDOTADPCSearchResults_League)(nil), "protocol.CMsgDOTADPCSearchResults.League")
	proto.RegisterType((*CMsgDOTADPCTeamFavoriteRankings)(nil), "protocol.CMsgDOTADPCTeamFavoriteRankings")
	proto.RegisterType((*CMsgDOTADPCTeamFavoriteRankings_Team)(nil), "protocol.CMsgDOTADPCTeamFavoriteRankings.Team")
}

func init() {
	proto.RegisterFile("dota_gcmessages_client_fantasy.proto", fileDescriptor_ad607e4a12cf9d50)
}

var fileDescriptor_ad607e4a12cf9d50 = []byte{
	// 2667 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x98, 0x5b, 0x77, 0xdb, 0xc6,
	0xb5, 0x80, 0xcd, 0x8b, 0x44, 0x6a, 0xcb, 0xa4, 0xb6, 0xc7, 0x96, 0x4c, 0xd3, 0x17, 0xc9, 0xb4,
	0x1d, 0x2b, 0x89, 0xad, 0xf0, 0x22, 0xea, 0xe2, 0x13, 0x27, 0x61, 0x48, 0x48, 0xe1, 0x09, 0x4d,
	0x32, 0x20, 0x69, 0xc7, 0x27, 0x27, 0x07, 0x81, 0x89, 0x91, 0x8c, 0x15, 0x88, 0xe0, 0xc1, 0x40,
	0x6e, 0x9c, 0xa7, 0xfe, 0x8a, 0xfe, 0x81, 0xac, 0xf6, 0xa9, 0x4f, 0x5d, 0xed, 0x53, 0x57, 0xfb,
	0xd0, 0x3f, 0xd0, 0x87, 0xfe, 0x8d, 0xae, 0xbe, 0xb4, 0x8f, 0x5d, 0xab, 0x5d, 0x18, 0x00, 0x04,
	0x28, 0x72, 0x60, 0x25, 0xcd, 0xca, 0x13, 0x39, 0xfb, 0x9b, 0xd9, 0xb3, 0xb1, 0xf7, 0xec, 0x3d,
	0x17, 0xb8, 0xab, 0x99, 0xb6, 0xaa, 0x1c, 0x0f, 0x4f, 0x28, 0x63, 0xea, 0x31, 0x65, 0xca, 0xd0,
	0xd0, 0xe9, 0xc8, 0x56, 0x8e, 0xd4, 0x91, 0xad, 0xb2, 0xd7, 0x5b, 0x63, 0xcb, 0xb4, 0x4d, 0x92,
	0xe6, 0x3f, 0x43, 0xd3, 0xc8, 0x5f, 0xe5, 0xfd, 0xd9, 0x4b, 0xd5, 0xa2, 0x9a, 0x42, 0x47, 0xa7,
	0x27, 0xcc, 0xed, 0x52, 0xf8, 0x6d, 0x0a, 0x48, 0xfd, 0x09, 0x3b, 0x6e, 0x74, 0xfa, 0xb5, 0xae,
	0xa1, 0xbe, 0xa6, 0x56, 0x73, 0x74, 0x64, 0x92, 0x9b, 0x00, 0xea, 0x70, 0x68, 0x9e, 0x8e, 0x6c,
	0x45, 0xd7, 0x72, 0xb1, 0x8d, 0xd8, 0x66, 0x46, 0x5e, 0xf2, 0x24, 0x4d, 0x8d, 0x10, 0x48, 0x8e,
	0xd4, 0x13, 0x9a, 0x8b, 0x6f, 0xc4, 0x36, 0x97, 0x64, 0xfe, 0x9f, 0xdc, 0x86, 0x8b, 0x1c, 0x5b,
	0xaf, 0x95, 0xa1, 0xa9, 0xd1, 0x5c, 0x82, 0xb3, 0x65, 0x4f, 0x56, 0x37, 0x35, 0x4a, 0x64, 0xb8,
	0xe8, 0x19, 0xa8, 0x58, 0xa6, 0x41, 0x73, 0xc9, 0x8d, 0xd8, 0x66, 0xb6, 0x7c, 0x75, 0xcb, 0x37,
	0x73, 0xeb, 0xc0, 0xa3, 0xb2, 0x69, 0x50, 0xf6, 0x68, 0xed, 0xa0, 0xd6, 0xee, 0xd7, 0x7a, 0xcf,
	0x15, 0xb9, 0xd3, 0x92, 0x94, 0x41, 0xbb, 0x21, 0x1d, 0x34, 0xdb, 0x52, 0x43, 0x5e, 0xf6, 0x94,
	0x38, 0xbd, 0xc8, 0x55, 0x48, 0xd9, 0x54, 0x3d, 0x71, 0xcc, 0x5c, 0xe0, 0x66, 0x2e, 0x3a, 0xcd,
	0xa6, 0x46, 0xae, 0xc3, 0x12, 0x07, 0xdc, 0xd0, 0x45, 0x6e, 0x4c, 0xda, 0x11, 0xb4, 0x1d, 0x63,
	0xaf, 0x01, 0xff, 0xaf, 0xd8, 0xea, 0x71, 0x2e, 0xc5, 0x19, 0xd7, 0xd2, 0x57, 0x8f, 0x49, 0x0e,
	0x52, 0x6c, 0x6c, 0x8e, 0x98, 0x69, 0xe5, 0xd2, 0x2e, 0xf1, 0x9a, 0x8e, 0x46, 0x9d, 0x29, 0x86,
	0x39, 0xfc, 0x9a, 0x6a, 0xb9, 0xa5, 0x8d, 0xd8, 0x66, 0x5a, 0x4e, 0xeb, 0xac, 0xc5, 0xdb, 0x64,
	0x15, 0x16, 0x75, 0xa6, 0x8c, 0x2d, 0x33, 0x07, 0x9c, 0x2c, 0xe8, 0xac, 0x6b, 0x99, 0xce, 0x18,
	0x8b, 0xaa, 0x86, 0x6b, 0xc5, 0xb2, 0x6b, 0x85, 0x23, 0xe0, 0x56, 0xdc, 0x83, 0xac, 0x6d, 0xda,
	0xaa, 0xa1, 0x50, 0xd5, 0x1a, 0xe9, 0xa3, 0x63, 0x96, 0xcb, 0xf0, 0x4f, 0xc8, 0x70, 0xa9, 0xe4,
	0x09, 0xc9, 0x07, 0x90, 0xb2, 0x28, 0x3b, 0x35, 0x6c, 0x96, 0xcb, 0x6e, 0x24, 0x36, 0x97, 0xcb,
	0x77, 0x03, 0x8f, 0xcd, 0xc6, 0x6e, 0x4b, 0x76, 0xfb, 0xca, 0xfe, 0x20, 0x52, 0x80, 0x0c, 0xff,
	0xd8, 0x53, 0xcb, 0x50, 0x0c, 0xf3, 0xd8, 0xcc, 0xad, 0xb8, 0xa1, 0x71, 0x84, 0x03, 0xcb, 0x68,
	0x99, 0xc7, 0x26, 0x69, 0x41, 0x46, 0x3d, 0xd5, 0x74, 0x5b, 0xa1, 0x23, 0xdb, 0xd2, 0x29, 0xcb,
	0x21, 0x9f, 0xe9, 0x7e, 0xe4, 0x4c, 0x35, 0x67, 0x84, 0xe4, 0x84, 0x57, 0xbe, 0xa8, 0xfa, 0xff,
	0x75, 0xca, 0xc8, 0xbb, 0x70, 0x89, 0xcf, 0xa8, 0xbe, 0x78, 0x61, 0xd1, 0x57, 0xba, 0x6a, 0xeb,
	0xe6, 0x28, 0x77, 0x89, 0xcf, 0x8a, 0x0e, 0xa8, 0x85, 0xe4, 0xf9, 0xaf, 0x20, 0xe5, 0x99, 0xec,
	0x78, 0xcb, 0xa0, 0xea, 0xf1, 0x29, 0x0d, 0x56, 0x5d, 0xda, 0x15, 0x34, 0x35, 0x72, 0x03, 0x96,
	0xc6, 0x86, 0x3a, 0xa4, 0x27, 0x74, 0x64, 0xf3, 0x95, 0x97, 0x91, 0x03, 0x01, 0xc9, 0x43, 0x7a,
	0xe2, 0xc5, 0x84, 0x3b, 0xd2, 0x6f, 0xe7, 0xff, 0x1c, 0x03, 0x08, 0x6c, 0x25, 0xf7, 0x61, 0x85,
	0xd9, 0xaa, 0x65, 0x2b, 0xb6, 0x7e, 0x42, 0x99, 0xad, 0x9e, 0x8c, 0xbd, 0xb9, 0xb2, 0x5c, 0xdc,
	0xf7, 0xa5, 0xe4, 0x0e, 0x64, 0xe8, 0x48, 0x0b, 0x75, 0x73, 0x67, 0xbd, 0x48, 0x47, 0x5a, 0xd0,
	0x29, 0xb4, 0x00, 0x13, 0xe2, 0x05, 0x98, 0x8c, 0x58, 0x80, 0x0b, 0xd3, 0x0b, 0x70, 0x26, 0x5c,
	0x8b, 0x33, 0xe1, 0x2a, 0x3c, 0x87, 0xb5, 0xd9, 0x78, 0xb4, 0x74, 0x66, 0x93, 0x0f, 0xe1, 0xe2,
	0x98, 0x4b, 0x14, 0x7d, 0x74, 0x64, 0xb2, 0x5c, 0x8c, 0xc7, 0xf1, 0x46, 0x54, 0x1c, 0xe5, 0xe5,
	0xf1, 0xe4, 0x3f, 0x2b, 0x7c, 0x17, 0x0b, 0x2a, 0x42, 0x9f, 0xaa, 0x27, 0xb2, 0xc9, 0x6c, 0x6a,
	0x39, 0xde, 0x3f, 0xeb, 0xae, 0x40, 0x10, 0x76, 0x42, 0x7c, 0xca, 0x09, 0x0f, 0x80, 0x9c, 0xd0,
	0x93, 0x17, 0xd4, 0x52, 0x82, 0x7a, 0xe2, 0x04, 0x28, 0xb1, 0x99, 0x91, 0xd1, 0x25, 0x35, 0xbf,
	0xac, 0x30, 0xb2, 0x09, 0x38, 0x34, 0xd5, 0xe1, 0xcb, 0x50, 0x67, 0xee, 0xb9, 0x8c, 0x9c, 0xe5,
	0xf2, 0x49, 0xd7, 0xc2, 0xef, 0x93, 0x81, 0x07, 0x1a, 0xdd, 0x7a, 0xd7, 0x32, 0x8f, 0x74, 0x83,
	0xf2, 0xda, 0xf5, 0x18, 0x96, 0x43, 0x1e, 0xe0, 0xb6, 0xbe, 0xc9, 0x01, 0x10, 0x38, 0x80, 0x7c,
	0x0e, 0x2b, 0x63, 0x8b, 0x6a, 0xfa, 0xd0, 0x59, 0x9c, 0xae, 0x8a, 0x38, 0x57, 0xf1, 0xde, 0xac,
	0x8a, 0xe9, 0x99, 0xb7, 0xba, 0x93, 0x71, 0x5c, 0x6b, 0x76, 0x3c, 0xd5, 0x26, 0x9d, 0xa0, 0xfc,
	0x71, 0xb5, 0x09, 0xae, 0xf6, 0xc1, 0x1b, 0xd5, 0x7a, 0x55, 0xd1, 0x0d, 0xd5, 0x51, 0xd0, 0x20,
	0x55, 0x58, 0xd3, 0x74, 0xa6, 0xbe, 0x30, 0xa8, 0xa6, 0x8c, 0x4c, 0x5b, 0x3f, 0xd2, 0x87, 0x3c,
	0xa5, 0x58, 0x2e, 0xc9, 0x1d, 0xbc, 0xea, 0xd3, 0x76, 0x18, 0xe6, 0x3f, 0x83, 0xec, 0xb4, 0xa5,
	0x4e, 0xcd, 0x1b, 0x53, 0x6b, 0xe8, 0x24, 0x96, 0x1b, 0x5a, 0xbf, 0xe9, 0x94, 0x28, 0x67, 0xd7,
	0xd0, 0x94, 0x9f, 0xe9, 0x23, 0x37, 0xb9, 0x1c, 0x67, 0x2c, 0xc8, 0x19, 0x2e, 0x7d, 0xe6, 0x09,
	0xf3, 0xbf, 0x8e, 0xc1, 0x72, 0xc8, 0x4c, 0xf2, 0x16, 0xac, 0xd8, 0xe6, 0x58, 0xd9, 0x2f, 0x2a,
	0x47, 0xfa, 0x48, 0x67, 0x2f, 0x29, 0xf3, 0x14, 0x67, 0x6c, 0x73, 0xbc, 0x5f, 0x3c, 0xf0, 0x84,
	0x7e, 0xbf, 0xdd, 0x6a, 0xd0, 0x2f, 0x3e, 0xe9, 0xb7, 0x5b, 0x3d, 0xdb, 0xaf, 0x1a, 0xd2, 0x97,
	0x98, 0xf4, 0xab, 0x06, 0xfa, 0x66, 0xcd, 0x75, 0x97, 0xcf, 0xb4, 0xb9, 0x85, 0x3f, 0xc6, 0xe0,
	0x8a, 0xef, 0xec, 0x16, 0x55, 0x35, 0x6a, 0xbd, 0x30, 0x55, 0x4b, 0x63, 0xa4, 0x0f, 0x17, 0x8d,
	0x50, 0x3b, 0x17, 0xe7, 0xd9, 0x53, 0x9c, 0x0d, 0x51, 0x78, 0xd4, 0x96, 0x4c, 0x8f, 0x75, 0x73,
	0x14, 0x12, 0xc9, 0x53, 0x5a, 0xf2, 0x5d, 0xb8, 0x34, 0xd3, 0xc5, 0x29, 0x58, 0x9a, 0xfe, 0x4a,
	0x67, 0x4e, 0x69, 0xf4, 0x4a, 0x9d, 0xdf, 0x26, 0xeb, 0xb0, 0x1c, 0x4e, 0x97, 0x38, 0x8f, 0x26,
	0x4c, 0xf6, 0x5f, 0x56, 0xf8, 0x16, 0x6e, 0x4e, 0x96, 0xb1, 0xca, 0xd8, 0xd8, 0xb4, 0xec, 0xa7,
	0xa6, 0x4d, 0x9d, 0x7c, 0x3d, 0x3c, 0xa5, 0xec, 0x0d, 0x95, 0xf4, 0x3a, 0x2c, 0x39, 0xfe, 0x71,
	0x32, 0xc4, 0xcf, 0xd7, 0xb4, 0x2b, 0x68, 0x6a, 0xce, 0xdc, 0xd6, 0xa9, 0xf3, 0xff, 0x74, 0x1c,
	0xd4, 0x34, 0xf0, 0x45, 0x4d, 0xad, 0xf0, 0xbb, 0x18, 0xdc, 0x9d, 0x37, 0xf9, 0x21, 0x1d, 0x51,
	0x4b, 0x1f, 0xf6, 0xa8, 0x41, 0xf9, 0xca, 0x22, 0x26, 0xac, 0x30, 0xbf, 0xa1, 0xe8, 0x23, 0x8d,
	0x7e, 0xc3, 0x2d, 0xc9, 0x96, 0xdf, 0x0d, 0xfc, 0xe9, 0x28, 0x51, 0xca, 0xc5, 0x52, 0xc5, 0xd7,
	0x34, 0x19, 0xde, 0x1c, 0x69, 0xfa, 0x90, 0xb2, 0x47, 0xd7, 0xba, 0xdd, 0x52, 0x45, 0xe9, 0x49,
	0x2d, 0xa5, 0xd6, 0x6a, 0xf5, 0xfa, 0x35, 0x59, 0xe9, 0xb6, 0x6a, 0xcf, 0x25, 0x59, 0x29, 0xca,
	0x59, 0x16, 0xea, 0x4c, 0xbf, 0x71, 0x6a, 0xd4, 0x44, 0xe2, 0xef, 0x10, 0x13, 0x41, 0xe1, 0x8b,
	0x59, 0x9f, 0xf5, 0x9c, 0xe2, 0x45, 0x35, 0xb7, 0x12, 0x38, 0x35, 0x99, 0xf9, 0x55, 0xcc, 0x31,
	0x34, 0x29, 0xa7, 0x98, 0x57, 0xc6, 0xd6, 0x61, 0x99, 0x17, 0x3a, 0xc5, 0xa0, 0xaf, 0xa8, 0xe1,
	0xe9, 0x06, 0x2e, 0x6a, 0x39, 0x92, 0xc2, 0x27, 0x70, 0xe7, 0xac, 0x72, 0x57, 0x6b, 0x5d, 0xb5,
	0xb4, 0xfa, 0x4b, 0xd5, 0x30, 0xe8, 0xe8, 0xd8, 0x3d, 0x24, 0xf9, 0x8d, 0x20, 0x32, 0xcb, 0x13,
	0x59, 0x53, 0x2b, 0xfc, 0x23, 0x1e, 0xac, 0xcd, 0xb0, 0x7b, 0xc9, 0x01, 0x00, 0xb7, 0xee, 0x95,
	0x69, 0x53, 0xbf, 0xae, 0xcf, 0xdb, 0x9f, 0xe7, 0xad, 0x07, 0x99, 0x6f, 0x45, 0x8e, 0x88, 0x91,
	0x2f, 0x81, 0x1c, 0xbb, 0xa1, 0x52, 0x26, 0xce, 0xf1, 0x57, 0xfa, 0x56, 0xb4, 0xbe, 0xb3, 0x21,
	0x96, 0x2f, 0x1d, 0x9f, 0x91, 0x30, 0xd2, 0xe5, 0xbb, 0xab, 0xe3, 0x56, 0xc5, 0xad, 0xaa, 0x6e,
	0xb9, 0x8f, 0xb4, 0x75, 0x2a, 0x0e, 0x7c, 0x1b, 0x0e, 0x9a, 0x8c, 0x0c, 0x61, 0xcd, 0x2b, 0xe8,
	0x43, 0x27, 0xb5, 0x27, 0xce, 0x72, 0xcb, 0xdc, 0x72, 0xf9, 0xa1, 0x58, 0xf1, 0x9c, 0x18, 0xc8,
	0x57, 0xc6, 0xb3, 0x42, 0x56, 0x18, 0xc1, 0xa6, 0x33, 0xb8, 0xce, 0xcf, 0xd1, 0x7d, 0xf3, 0xb0,
	0x7e, 0x48, 0x43, 0xa3, 0xdd, 0x4d, 0x50, 0xa6, 0xff, 0x7f, 0x4a, 0x99, 0x1d, 0x9d, 0x5c, 0xf7,
	0x20, 0xeb, 0x57, 0xf9, 0x31, 0xb5, 0x74, 0xd3, 0x4f, 0xa1, 0x8c, 0x27, 0xed, 0x72, 0x61, 0xe1,
	0xef, 0x71, 0x78, 0xfb, 0x1c, 0x13, 0xf2, 0xb3, 0x27, 0x25, 0x5f, 0xc0, 0xa2, 0x7b, 0x9a, 0xf3,
	0x32, 0xe8, 0xd1, 0xf4, 0x27, 0x9f, 0x4b, 0x89, 0x77, 0x30, 0x7c, 0x94, 0xea, 0x0d, 0xea, 0x75,
	0xa9, 0xd7, 0x93, 0x3d, 0x95, 0xe4, 0x21, 0x5c, 0x0e, 0xfb, 0x57, 0xb7, 0xa9, 0xb7, 0x91, 0x27,
	0x36, 0x93, 0x32, 0x06, 0xde, 0x6a, 0xda, 0xd4, 0xc9, 0x85, 0x2b, 0xb0, 0xc0, 0x86, 0xa6, 0xe5,
	0x9e, 0xf0, 0xe3, 0xb2, 0xdb, 0x70, 0x72, 0xef, 0x48, 0x1f, 0xa9, 0x86, 0xfe, 0x2d, 0x75, 0xf7,
	0xec, 0xb4, 0x1c, 0x08, 0xc8, 0x2d, 0x00, 0x6f, 0x47, 0xd1, 0x0d, 0xca, 0x0f, 0x3c, 0x71, 0x39,
	0x24, 0x29, 0x1c, 0xc1, 0xa2, 0x6b, 0x1d, 0x59, 0x06, 0xdf, 0x3e, 0xbc, 0x40, 0x56, 0xe1, 0x92,
	0x24, 0xcb, 0x1d, 0x59, 0x19, 0xb4, 0x7b, 0x5d, 0xa9, 0xde, 0x3c, 0x68, 0x4a, 0x0d, 0x8c, 0x91,
	0xeb, 0x70, 0xd5, 0x15, 0x37, 0xdb, 0x4f, 0x6b, 0xad, 0x66, 0x43, 0x69, 0x49, 0xb5, 0xc3, 0x81,
	0xa4, 0x34, 0x1b, 0x18, 0x9f, 0x85, 0xfd, 0xe6, 0x13, 0xa9, 0xd7, 0xaf, 0x3d, 0xe9, 0x62, 0xa2,
	0xf0, 0xcf, 0x18, 0x3c, 0x9c, 0x76, 0xd8, 0xc7, 0xaa, 0x3d, 0x7c, 0x19, 0x11, 0x6b, 0x1b, 0x2e,
	0x79, 0xb1, 0x9e, 0x9c, 0x76, 0xfc, 0xe4, 0x3b, 0x14, 0x05, 0xe1, 0x0d, 0x3a, 0xb7, 0x5a, 0x5c,
	0xe1, 0xe4, 0x08, 0x29, 0xa3, 0x31, 0x2d, 0x60, 0xf9, 0x01, 0xac, 0x9c, 0xe9, 0xf4, 0xa3, 0x2c,
	0xba, 0xbf, 0x25, 0xe1, 0xdc, 0xa6, 0x7a, 0x2b, 0x8f, 0x3a, 0x17, 0x18, 0xf7, 0xff, 0x7f, 0xf0,
	0xdd, 0xfe, 0x0a, 0x9c, 0x6a, 0xca, 0x81, 0xe6, 0xfc, 0x5f, 0xe3, 0x90, 0x3d, 0x33, 0x73, 0xe4,
	0x07, 0x97, 0xe0, 0x8a, 0x46, 0xc7, 0x16, 0x1d, 0xaa, 0x36, 0x9d, 0x3d, 0xa1, 0x5f, 0x0e, 0x58,
	0xe0, 0xc0, 0xaf, 0x26, 0x39, 0x94, 0xe0, 0x39, 0xf4, 0xe1, 0x0f, 0xff, 0x8c, 0xef, 0x97, 0x48,
	0xc9, 0x37, 0x25, 0xd2, 0x82, 0x30, 0x91, 0x16, 0xa3, 0x13, 0x29, 0x75, 0x36, 0x91, 0xe6, 0x2c,
	0x84, 0xf4, 0xbc, 0x85, 0xf0, 0x53, 0xe5, 0xdb, 0xbf, 0x62, 0x67, 0xcb, 0x6a, 0xef, 0x07, 0x96,
	0xd5, 0x1f, 0x10, 0x70, 0x02, 0x49, 0x66, 0x98, 0xb6, 0x97, 0x0a, 0xfc, 0xbf, 0x38, 0x44, 0xb1,
	0xb9, 0x21, 0xba, 0x06, 0x69, 0xfa, 0x8a, 0xba, 0x17, 0x11, 0xf7, 0x79, 0x21, 0xc5, 0xdb, 0x73,
	0x53, 0x6e, 0x71, 0x9e, 0xa7, 0xff, 0x90, 0x38, 0x5b, 0xe7, 0x7b, 0x3f, 0x46, 0x9d, 0xef, 0x7d,
	0xff, 0xe5, 0x59, 0xf8, 0x4d, 0xfc, 0xa7, 0x89, 0x3a, 0x59, 0x87, 0xeb, 0x2e, 0xf4, 0x4e, 0x6a,
	0xf5, 0x9a, 0xdc, 0x50, 0xda, 0x9d, 0xbe, 0xd2, 0x79, 0xd6, 0x96, 0x1a, 0x98, 0x24, 0x6b, 0x40,
	0xa6, 0x47, 0xf7, 0x5a, 0x9d, 0x3e, 0x2e, 0x90, 0x3c, 0xac, 0xb9, 0xf2, 0x83, 0x5a, 0xb3, 0x25,
	0x35, 0xdc, 0x81, 0xcd, 0xf6, 0x41, 0x07, 0x17, 0x83, 0x19, 0x6b, 0xf5, 0x7a, 0x67, 0xd0, 0xee,
	0x2b, 0x8d, 0x41, 0xb7, 0xd5, 0xac, 0xd7, 0xfa, 0x12, 0xa6, 0x82, 0x81, 0xad, 0x4e, 0xfd, 0x53,
	0x29, 0x6c, 0x4d, 0x9a, 0xdc, 0x81, 0xf5, 0xb9, 0xdf, 0x71, 0xe0, 0x18, 0x28, 0xc9, 0xcd, 0x4e,
	0x03, 0x97, 0xc8, 0x55, 0xb8, 0x3c, 0xdd, 0x49, 0x7a, 0x2a, 0xb5, 0xfb, 0x08, 0x85, 0xbf, 0x24,
	0xe0, 0x96, 0x7f, 0xaa, 0xf0, 0x6e, 0x38, 0x8d, 0x6e, 0xdd, 0x2d, 0xce, 0x3d, 0x5b, 0xb5, 0x4f,
	0x19, 0x79, 0xca, 0x2f, 0x0d, 0x7c, 0xdd, 0x86, 0xae, 0xdc, 0x95, 0xd9, 0x53, 0xc9, 0xfc, 0xf1,
	0xde, 0x76, 0xe0, 0x5e, 0xef, 0x8c, 0xc9, 0x7f, 0x96, 0xff, 0x45, 0x1c, 0x20, 0x60, 0xd1, 0xe9,
	0xb1, 0x0e, 0xde, 0x50, 0x25, 0xf4, 0x30, 0x07, 0xae, 0x88, 0x3f, 0x38, 0xcc, 0x79, 0xf4, 0x48,
	0x9c, 0xef, 0xd1, 0x23, 0x39, 0xe7, 0xd1, 0xe3, 0x1e, 0x64, 0x35, 0xf5, 0x75, 0x78, 0x4b, 0x5c,
	0xe0, 0x77, 0x94, 0x8c, 0xa6, 0xbe, 0x0e, 0xb6, 0x31, 0x32, 0x80, 0x45, 0xc6, 0xbf, 0x91, 0x57,
	0xa1, 0x6c, 0x79, 0xe7, 0xdc, 0x3e, 0x91, 0xdc, 0x35, 0xed, 0xb6, 0x1e, 0x2d, 0x0c, 0xda, 0x3d,
	0xa9, 0x2f, 0x7b, 0xca, 0x0a, 0x1f, 0x41, 0x66, 0x8a, 0x93, 0x25, 0x70, 0x7b, 0xe0, 0x05, 0x67,
	0x65, 0x77, 0x6b, 0x72, 0xbf, 0x59, 0x6b, 0x61, 0x8c, 0xa4, 0x21, 0x79, 0x30, 0x68, 0xb5, 0x30,
	0x4e, 0x32, 0xb0, 0x54, 0xef, 0xb4, 0xeb, 0xad, 0x41, 0x43, 0x6a, 0x60, 0xa2, 0xf0, 0xa7, 0x24,
	0xe4, 0x42, 0xb7, 0xed, 0x1e, 0x55, 0xad, 0xe1, 0x4b, 0xff, 0x15, 0xaa, 0x0e, 0x29, 0xff, 0xe4,
	0xea, 0x86, 0xf2, 0xed, 0xb9, 0x57, 0xf4, 0xa9, 0x41, 0x5b, 0xde, 0xd9, 0xd5, 0x1f, 0x49, 0x1e,
	0xc3, 0x82, 0x73, 0xe4, 0xf6, 0x0f, 0xd6, 0xf7, 0xcf, 0xa1, 0x82, 0xbf, 0xb6, 0xb8, 0xa3, 0x1c,
	0x1b, 0xdc, 0xe0, 0xf9, 0xa7, 0xe7, 0xf3, 0xd8, 0xe0, 0x7a, 0x50, 0xf6, 0x47, 0xe6, 0x9b, 0xb0,
	0xe8, 0x5d, 0x6d, 0xb2, 0x10, 0x9f, 0x2c, 0x9a, 0xb8, 0x3e, 0xff, 0x01, 0x77, 0xea, 0xa9, 0x32,
	0x31, 0xfd, 0x54, 0x99, 0x7f, 0x1f, 0x92, 0x8e, 0x79, 0xe7, 0x52, 0x84, 0x90, 0x38, 0xb5, 0x0c,
	0x4f, 0x85, 0xf3, 0x37, 0xff, 0x00, 0x16, 0x5d, 0xdb, 0xce, 0x33, 0xbe, 0xf0, 0xcb, 0x18, 0xac,
	0x4a, 0x53, 0x5f, 0xd6, 0xa0, 0x4c, 0xb7, 0xa8, 0xe6, 0xa4, 0xf2, 0xd7, 0xca, 0x5c, 0xa4, 0x78,
	0x97, 0x05, 0x8c, 0x91, 0xdb, 0x70, 0x53, 0xd4, 0xc9, 0xf9, 0x04, 0x86, 0xf1, 0x28, 0x3d, 0xae,
	0x9d, 0x0c, 0x93, 0x4e, 0x15, 0x13, 0x75, 0xaa, 0x19, 0x06, 0xa6, 0x0a, 0xbf, 0x8a, 0xc1, 0x7a,
	0x28, 0x16, 0x8e, 0xf2, 0x03, 0xf5, 0x95, 0x69, 0xe9, 0x36, 0x95, 0xd5, 0xd1, 0xd7, 0xfc, 0xed,
	0xb6, 0xe1, 0x2f, 0x83, 0x98, 0xe8, 0x7e, 0x25, 0x18, 0x19, 0x5e, 0x0d, 0xf9, 0xc7, 0x9e, 0xf7,
	0x43, 0xcf, 0x6c, 0xb1, 0xa9, 0x67, 0x36, 0xe7, 0xd0, 0xe0, 0x29, 0xf0, 0x5f, 0x50, 0x02, 0xc1,
	0x3b, 0xdf, 0xad, 0xc2, 0xed, 0x37, 0x5e, 0xb4, 0xc9, 0x4d, 0x10, 0x5f, 0xb5, 0xf1, 0x42, 0x14,
	0x2e, 0x61, 0x2c, 0x0a, 0x97, 0x31, 0x1e, 0x85, 0x2b, 0x98, 0x88, 0xc2, 0xdb, 0x98, 0x8c, 0xc2,
	0x55, 0x5c, 0x88, 0xc2, 0x3b, 0xb8, 0x18, 0x85, 0x77, 0x31, 0x15, 0x85, 0xf7, 0x30, 0x1d, 0x85,
	0xf7, 0x71, 0x89, 0xdc, 0x80, 0xdc, 0x04, 0x7f, 0x36, 0xa8, 0xb5, 0xba, 0xb2, 0xd4, 0x50, 0x9e,
	0x49, 0xbd, 0xbe, 0x52, 0x44, 0x88, 0xa0, 0x25, 0x5c, 0x8e, 0xa0, 0x65, 0xbc, 0x18, 0x41, 0x2b,
	0x98, 0x89, 0xa0, 0xdb, 0x98, 0x8d, 0xa0, 0x55, 0x5c, 0x89, 0xa0, 0x3b, 0x88, 0x11, 0x74, 0x17,
	0x2f, 0x45, 0xd0, 0x3d, 0x24, 0x11, 0x74, 0x1f, 0x2f, 0x4f, 0xb9, 0xf2, 0x8c, 0x37, 0x8a, 0x78,
	0x25, 0x0a, 0x97, 0x70, 0x35, 0x0a, 0x97, 0x71, 0x2d, 0x0a, 0x57, 0xf0, 0x6a, 0x14, 0xde, 0xc6,
	0xdc, 0x7c, 0xc3, 0xa5, 0x1a, 0x0f, 0xe3, 0xb5, 0x08, 0x5a, 0xc2, 0x7c, 0x04, 0x2d, 0xe3, 0xf5,
	0x08, 0x5a, 0xc1, 0x1b, 0x11, 0x74, 0x1b, 0x6f, 0x46, 0xd0, 0x2a, 0xde, 0x8a, 0xa0, 0x3b, 0xb8,
	0x1e, 0x41, 0x77, 0x71, 0x23, 0x82, 0xee, 0xe1, 0xed, 0x08, 0xba, 0x8f, 0x85, 0xf9, 0xae, 0x74,
	0xbd, 0x51, 0xc4, 0x3b, 0x51, 0xb8, 0x84, 0x77, 0xa3, 0x70, 0x19, 0xef, 0x45, 0xe1, 0x0a, 0xbe,
	0x15, 0x85, 0xb7, 0xf1, 0x3e, 0xb9, 0x06, 0xab, 0x13, 0xdc, 0x97, 0x6a, 0x4f, 0xea, 0x83, 0x2e,
	0xff, 0xc5, 0x4d, 0xe7, 0xfc, 0x38, 0x83, 0xdc, 0x3c, 0xc6, 0xb7, 0xc9, 0x2d, 0xc8, 0xcf, 0x1d,
	0xc7, 0xcf, 0x93, 0xf8, 0x0e, 0xd9, 0x80, 0x1b, 0x82, 0xc1, 0x6e, 0x8f, 0x77, 0x49, 0x0e, 0xae,
	0x4c, 0x7a, 0xf0, 0xb3, 0x23, 0xb7, 0xac, 0x88, 0x0f, 0x04, 0xa4, 0x84, 0x0f, 0x05, 0xa4, 0x8c,
	0x5b, 0x02, 0x52, 0xc1, 0xf7, 0x04, 0x64, 0x1b, 0x8b, 0x02, 0x52, 0xc5, 0x92, 0x80, 0xec, 0x60,
	0x59, 0x40, 0x76, 0xb1, 0x22, 0x20, 0x7b, 0xb8, 0x2d, 0x20, 0xfb, 0x58, 0x9d, 0xf2, 0x7e, 0xe8,
	0x4b, 0x8b, 0xb8, 0x23, 0x42, 0x25, 0xdc, 0x15, 0xa1, 0x32, 0xee, 0x89, 0x50, 0x05, 0xf7, 0x45,
	0x68, 0x1b, 0x1f, 0x89, 0x50, 0x15, 0xff, 0x4b, 0x84, 0x76, 0xf0, 0x7d, 0x11, 0xda, 0xc5, 0xc7,
	0x22, 0xb4, 0x87, 0x1f, 0x88, 0xd0, 0x3e, 0x7e, 0x28, 0x40, 0xe5, 0x22, 0x7e, 0x24, 0x42, 0x25,
	0xac, 0x89, 0x50, 0x19, 0x3f, 0x16, 0xa1, 0x0a, 0xd6, 0x45, 0x68, 0x1b, 0x1b, 0x22, 0x54, 0x45,
	0x49, 0x84, 0x76, 0xf0, 0x40, 0x84, 0x76, 0xf1, 0x50, 0x84, 0xf6, 0xf0, 0x13, 0x11, 0xda, 0xc7,
	0xa6, 0x00, 0x55, 0x8a, 0xf8, 0xdf, 0x22, 0x54, 0xc2, 0x4f, 0x45, 0xa8, 0x8c, 0x2d, 0x11, 0xaa,
	0xe0, 0x13, 0x11, 0xda, 0xc6, 0xb6, 0x08, 0x55, 0xb1, 0x23, 0x42, 0x3b, 0xd8, 0x15, 0xa1, 0x5d,
	0xfc, 0x4c, 0x84, 0xf6, 0x50, 0x16, 0xa1, 0x7d, 0xec, 0x09, 0xd0, 0x76, 0x11, 0xfb, 0x22, 0x54,
	0xc2, 0x81, 0x08, 0x95, 0xf1, 0xa9, 0x08, 0x55, 0xf0, 0x19, 0xb9, 0x0c, 0x2b, 0x13, 0xd4, 0xeb,
	0xb4, 0x3a, 0x4a, 0x11, 0x3f, 0x9f, 0x15, 0x96, 0xf0, 0xf9, 0xac, 0xb0, 0x8c, 0xff, 0x33, 0x2b,
	0xac, 0xe0, 0x17, 0xb3, 0xc2, 0x6d, 0xfc, 0xdf, 0x59, 0x61, 0x15, 0xbf, 0x9c, 0x15, 0xee, 0xe0,
	0xff, 0xcd, 0x0a, 0x77, 0x51, 0xf9, 0x78, 0xe1, 0x93, 0xd8, 0xcf, 0x63, 0x17, 0xfe, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0xde, 0xe1, 0x40, 0x70, 0xdb, 0x22, 0x00, 0x00,
}
